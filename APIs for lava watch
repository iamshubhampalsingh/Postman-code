{
	"info": {
		"_postman_id": "7c76d194-ace3-4afa-982c-4fc8df261169",
		"name": "Lava APIs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29728464",
		"_collection_link": "https://blue-crescent-400838.postman.co/workspace/Mediology-Lava-RestApis~d6939378-1186-49b8-8b61-6f7bee742558/collection/29728464-7c76d194-ace3-4afa-982c-4fc8df261169?action=share&source=collection_link&creator=29728464"
	},
	"item": [
		{
			"name": "login",
			"item": [
				{
					"name": "/login/user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.globals.set(\"identity\", jsonData.identity);",
									"",
									"    pm.collectionVariables.set(\"identity\", jsonData.identity);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\" : \"\",\n    \"mobile_number\" : \"+919149321656\",\n    \"device_id\" : \"L012W1\",\n    \"model_name\" : \"smartwearable\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}login/user",
							"host": [
								"{{url}}login"
							],
							"path": [
								"user"
							]
						},
						"description": "The \"Send OTP\" API is a pivotal component of the user authentication process. Its primary function is to dispatch a one-time password (OTP) to the user's registered mobile number or email address. The OTP serves as a secure authentication token, ensuring the identity of the user.\n\n**Key Features:**\n\n- **Method:** POST\n- **Endpoint:** `/login/user`\n    \n\n**Usage:**\n\n1. The API accepts a user's mobile number or email address as a parameter to initiate the OTP delivery process.\n2. Upon a successful request, the system generates a unique temporary user ID, referred to as \"identity.\" This identity is a crucial component in OTP verification, ensuring that the OTP corresponds to the authenticated user.\n3. The OTP is sent to the provided mobile number or email address, which the user must receive and input for further authentication."
					},
					"response": []
				},
				{
					"name": "/login/otp",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Setting ENV....\", function () {",
									"    var jsonData = pm.response.json();",
									"    if(jsonData.token) {",
									"        pm.environment.set(\"access_token\", jsonData.token);",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"otp\" : \"1313\",\n    \"clear_active_sessions_flag\" : false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}login/otp?identity={{identity}}",
							"host": [
								"{{url}}login"
							],
							"path": [
								"otp"
							],
							"query": [
								{
									"key": "identity",
									"value": "{{identity}}"
								}
							]
						},
						"description": "The \"Verify OTP\" API is a crucial step in the user authentication process. It allows users to confirm their identity by verifying the one-time password (OTP) they received. Additionally, it offers a feature to clear the active session (if specified true) for enhanced security.\n\n**Key Features:**\n\n- **Method:** POST\n- **Endpoint:** `/login/otp`\n    \n\n**Usage:**\n\n1. To verify the OTP and establish the user's identity, this API requires the following parameters:\n    - `identity`: The temporary user ID obtained during the \"Send OTP\" step. This ensures that the OTP verification pertains to the correct user.\n    - `otp`: The one-time password entered by the user for authentication.\n    - `clear_active_session` (boolean): . If set to ,`true`, the active session associated with the user will be terminated upon successful OTP verification.\n2. Upon successful verification, the API generates an `access_token`. This access token serves as a global variable, allowing the user to access various parts of the system without the need for repetitive authentication.\n    \n3. The obtained `access_token` should be included in the \"Authorization\" header for all subsequent API requests. This ensures user validation and access to various parts of the system without the need for repetitive social media authentication.\n    \n\nThe \"Verify OTP\" API plays a vital role in ensuring the security and seamless user experience within the system. It confirms the user's identity and, if necessary, offers the flexibility to clear an existing session, enhancing overall account security. The `access_token` obtained from this API acts as a key for continued user validation throughout the system."
					},
					"response": []
				},
				{
					"name": "/login/auth-social",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Setting ENV....\", function () {",
									"    var jsonData = pm.response.json();",
									"    if(jsonData.token) {",
									"        pm.environment.set(\"access_token\", jsonData.token);",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n    \"access_token\" :\"EAAGAaZC8YPl8BOymUw7Yn5xYuCodIFIdwEZAXUn9zrzG8lnbiejMMQldL83rc3kgHZBpim13fU9TSghwvHSr3kePYNrCyrvJDMZBDZBN6Axx3quOHBcFSj8nCM5YGkia1IEhRBftYZBSbv9ZBANgtUhwZAoV0oK4eSWqZCU2yztbmj945ne3RNIKvk1Qd0jhzVG8msx3dLkYZBg0mi3Cpb4wZDZD\",\n    \"provider\":\"facebook\", \n    \"os\":\"android\",\n    \"device_id\" : \"459361\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}login/auth-social",
							"host": [
								"{{url}}login"
							],
							"path": [
								"auth-social"
							]
						},
						"description": "The \"Login via Social Media Accounts\" API streamlines the process of user authentication by enabling login through popular social media providers. Users can use their social media credentials to access the system securely.\n\n**Key Features:**\n\n- **Method:** POST\n    \n- **Endpoint:** `/login/auth-social`\n    \n\n**Usage:**\n\n1. To log in using a social media account, provide the following parameters in the request body:\n    \n    - `access_token`: The access token obtained from the chosen social media provider, which authenticates the user.\n        \n    - `provider`: A parameter specifying the source of the login, indicating the social media platform (e.g., \"Facebook,\" \"Google,\" \"Twitter,\" etc.).\n        \n2. Upon a successful request, the API returns an `access_token`. This access token is a critical element in the authentication process and must be set as a global variable in Postman.\n    \n3. The obtained `access_token` should be included in the \"Authorization\" header for all subsequent API requests. This ensures user validation and access to various parts of the system without the need for repetitive social media authentication.\n    \n\nThe \"Login via Social Media Accounts\" API offers a convenient and secure means of authentication, leveraging popular social media platforms. By using the provided `access_token` in the Authorization header of subsequent requests, users can seamlessly access and interact with the system while maintaining the necessary security measures."
					},
					"response": []
				},
				{
					"name": "logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}login/logout",
							"host": [
								"{{url}}login"
							],
							"path": [
								"logout"
							]
						},
						"description": "The \"Logout\" API provides users with the means to terminate their active session, enhancing security and privacy. It operates based on the `access_token` included in the request header.\n\n**Key Features:**\n\n- **Method:** POST\n- **Endpoint:** `/logout`\n    \n\n**Usage:**\n\n1. To initiate a logout request, make a POST request to the `/logout` endpoint. Include the `access_token` in the \"Authorization\" header of the request.\n2. Upon successful execution of the API, the active user session associated with the provided `access_token` is destroyed. This ensures that the user is securely logged out and that their account remains protected.\n    \n\nThe \"Logout\" API is a fundamental feature for maintaining user account security and privacy. Users can easily end their sessions, safeguarding their data and ensuring that unauthorized access is prevented. It relies on the `access_token` in the header for authentication and session termination."
					},
					"response": []
				},
				{
					"name": "verifysession",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}login/verifysession",
							"host": [
								"{{url}}login"
							],
							"path": [
								"verifysession"
							]
						},
						"description": "The \"Verify Session\" API is an essential component in session management, enabling users to confirm the persistence of their active sessions within the system.\n\n**Key Features:**\n\n- **Method:** GET\n- **Endpoint:** `/verifysession`\n    \n\n**Usage:**\n\n1. To ensure the continuity of an active session, make a GET request to the `/verifysession` endpoint.\n    \n2. This API operates without any specific parameters or request body. Instead, it relies on the presence of the user's `access_token` in the \"Authorization\" header of the request.\n3. Upon successful execution of the API, the system validates the user's active session. If the session remains valid, the API responds positively, confirming the user's ongoing access to the system. If the session has expired or is no longer active, appropriate measures can be taken to re-authenticate the user.\n    \n\nThe \"Verify Session\" API is an integral component of session management, ensuring that users can securely and conveniently continue their interactions within the system. By verifying the `access_token` in the request header, it provides real-time confirmation of the session's validity, allowing for seamless user experiences while maintaining the necessary security protocols."
					},
					"response": []
				}
			],
			"description": "The \"Login Module\" encompasses a set of APIs designed to facilitate user authentication and session management. This collection includes five essential endpoints, each serving a specific purpose in the login and session verification workflow:\n\n1. **Send OTP:**\n    - Endpoint for generating and sending a one-time password (OTP) to the user's contact details, typically a mobile number or email. This step initiates the authentication process.\n2. **Verify OTP:**\n    - This API allows users to verify the OTP they received and confirm their identity. Successful verification grants access to the application.\n3. **Social Login:**\n    - Enabling a seamless login experience, this endpoint lets users log in via their social media accounts, such as Google or Facebook. It simplifies the authentication process and enhances user convenience.\n4. **Logout:**\n    - The \"Logout\" API provides a secure mechanism for users to terminate their active sessions, enhancing account security and privacy.\n5. **Verify Session:**\n    - This API verifies the continuity of an active user session. It ensures that a user's session remains valid and active, providing an additional layer of security for the application.\n\nThese APIs collectively form a robust authentication and session management system, ensuring user privacy, security, and a smooth login experience."
		},
		{
			"name": "users",
			"item": [
				{
					"name": "save-user-details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Message\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Saved successfully.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{name}}\",\n    \"gender\": \"{{gender}}\",\n    \"dob\": \"{{dob}}\",\n    \"height\": {{height}},\n    \"weight\": {{weight}},\n    \"step_length\": {{steps_length}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}user/save-user-details",
							"host": [
								"{{url}}user"
							],
							"path": [
								"save-user-details"
							]
						},
						"description": "The \"Save User Details\" API is a vital component of user account management, enabling users to update their user profiles within the system.\n\n**Key Features:**\n\n- **Method:** POST\n- **Endpoint:** `/save-user-details`\n    \n\n**Usage:**\n\n1. To update user profile details, make a POST request to the `/save-user-details` endpoint.\n    \n2. Include the user's `access_token` in the \"Authorization\" header of the request, ensuring that the user is authenticated for this operation.\n3. Provide the necessary parameters in the request body to update the user's profile. These parameters typically include personal details, contact information, and account preferences.\n    \n4. Upon successful execution of the API, the user's profile is updated based on the provided information, ensuring that their account is personalized according to their preferences.\n    \n\nThe \"Save User Details\" API empowers users to manage their profiles, maintaining accurate and up-to-date information. The `access_token` in header ensures the operation is secure and user-specific. This API is essential for user registration, account creation, and ongoing profile updates, enhancing the overall user experience."
					},
					"response": []
				},
				{
					"name": "update-profile-picture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Message\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"User profile picture saved successfully.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"image_buffer\": \"UklGRpwxAABXRUJQVlA4WAoAAAAgAAAAVwIAUQEASUNDUAwCAAAAAAIMbGNtcwIQAABtbnRyUkdCIFhZWiAH3AABABkAAwApADlhY3NwQVBQTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA9tYAAQAAAADTLWxjbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApkZXNjAAAA/AAAAF5jcHJ0AAABXAAAAAt3dHB0AAABaAAAABRia3B0AAABfAAAABRyWFlaAAABkAAAABRnWFlaAAABpAAAABRiWFlaAAABuAAAABRyVFJDAAABzAAAAEBnVFJDAAABzAAAAEBiVFJDAAABzAAAAEBkZXNjAAAAAAAAAANjMgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB0ZXh0AAAAAEZCAABYWVogAAAAAAAA9tYAAQAAAADTLVhZWiAAAAAAAAADFgAAAzMAAAKkWFlaIAAAAAAAAG+iAAA49QAAA5BYWVogAAAAAAAAYpkAALeFAAAY2lhZWiAAAAAAAAAkoAAAD4QAALbPY3VydgAAAAAAAAAaAAAAywHJA2MFkghrC/YQPxVRGzQh8SmQMhg7kkYFUXdd7WtwegWJsZp8rGm/fdPD6TD//1ZQOCBqLwAAkBIBnQEqWAJSAT55OplKJKMtraHyucmwDwlnbmWGZHd8dKoLFg1UFO/NetZ4WluUP3AGYryOjGtsdvhTut0f3Q7dZu4MjlzfS7NGa95lvsH2Dulf6S/7cDE8SaoC7AcvBu6OzIK6fvn6iUxCX5ROGLHjI3WwyGdFbSTpy8lzB/MwrnI8I/yQR/GQnaQxj3i2lKW+v47IcxepFk3YS/xRD4gAc3OgTfwJrDN++rsoVcZHenrQBVO9dv9zvfmJBIVrWrypZ3JGxiMgM73DZBKGRhrm3Qd2+GPHubku0GAlbevnsznpjkVEArnoT9oNszr7cgsiBNWIFHgdXLHSkS7f4VxEU8FL5WB8ts05EN2OoHpfZRlUZ8sO3rxpu6YDVLHv9957U1e4k+qaCebHPV8h8p/v+w1X6ugM48YiedrQBE59/jq+ynVq/mnQwLp2sROfZJ5xtpj1Sm3C0B9LWgUxqYLT4JhKqrl/eeZC+27dsjbBcQAmU0eV+cnzB334kbOt2ltxso5TfqW+tDfyWoXXyAxUmDvb3lWBsLzHucu50ha7gBhNj7Zp0taaH9XOnE4hFjNu8A1qafRg8qICFLdZfATrVZ/zUkUp41/vxEg7A9ddBxknLTHNvqqeo2tan+d7rCQ+zs2HpPxCJAT/Bo5IvrGCnFMUJ61Uuz/Cb5wCH0Ha3DCHeqQiddA1KJtE2Ziqv31lNnLUUzDCNpYDax/vt8x1U0gus8RoqHz2uj3TaGjgOGQwNz5HSpxSGFkZK8Cu9J2lU5V9kTYW0QjzPVvRbI1TbRaJXgpGO+vVhvLaVnYzkFEnO/pV3P3rG2xKb+Man87RX5G5GT+81SNcvBralRcAwMgEv0e5QxnMCPn8B5aXHoWd5jl8h5+okMMXXAS6lKa+KFyiSzIlN4z87WpgBmgFISOjVqu7YM/DSNA9asi1dwxdSyggG0qsnVjm/CPIzZcXxq0XswuRdeDmwn4TuusDPdHhuU8v3Ow39pPLMXYNfTi+G0F9cvrR7JQGK5kYPZmB5EE/yIjQ7bLSMJUk1vM2+MxoAi2ykPOQ806eu6MVN9Bq9TOtvmhrTWLInmrQd1VdWzE0zDBMyQZepcN9o4+/20cZrixUDX3WXC1cr510FrexJOCRccuBvfahtXjLBrLTtewYy6x8H+IcbdF3ogz3c2vrU+0JtryuyG2/Fa17D00AM64Ed+n/p50vLTntEmD8vtFaKu9/eBXUFuFyUkPjpdOLNzlgTyCv7o5fdSmW8KKTXybeZJoFor9wpPuo2wTjGaSwynaA6kdCHEV9S1JvuHkHwmZdiYZN08HHJ/4qXtqzIQ1Hhioa3hPDn/+3C5BFnTMfTviekB42N3Q9/B4jProgArTCp1YyXSz/U4RSuEEpcN+9h7DW7nHJJjDqaiygUW889GXVMB1RXQTrI2d2DwbNYmth2X6XMmqfF74Z8GILmBu7e0ej1gwYNTHG+lhrJ8HHIBiCYttatCBdIegjxrsjna/WIiZTv3Dx5ICnEKOSxAUsaBShQ8Sqs00LvIXQwLGsyM1jHUp/ePe7e+6xmFX1Ts82GUHXcdVSHP2M9hwH6tt80rRKYyK2NGcNgWlKc21tNUMo9bdU3Avkgel5cIX6P66kEr93+FwfZBkZsjvtWL/CLX2M9GnJmRXs5/7+h9GICFu92l+T8Jdo6nxLwiV017B9Ax721B3EB7vBSnfSAnT5Nb5EZ4IIn3a9J9D2cMstYq1BR++RCBBtlWX9Ihfh274ojDgOoVEuLukSSh0DMWFQdM/HMFgvRyS0xj8xF8MDba4lFYfY8ey9ezmFxHeWG4V6095S41ZKxlJwGudGeb6SaYYkuTF7VSdVi2cUBY8E6boePf7N7MLaFNYPjh5oNQ5lw7IoAaElpjJPSKHRy/aVzqCtlaKyLc05RFZt1pU4+xABU7I3rpH7XzWUIdoTctL0u09wDCSegEdW4hlgy7fv9xJNwDA6uiZYqMC5TQ44V01cpYHmYzR3Yq/eyvxh9GElkYZQ+kFrWZBgN1zYfHkmlz35mOR2AV+kuwh2c9RwRfNJ0jQ1mUIIp41rH8CjwG3QuiWXiNhyX7HBXe51miQoHXhpVchI8WE/gJIhgyf0+oXFc8CUrygiZajDYHjm/vD7/rEuayHPfmFQChxJ2GqTmejRD+tM/cNAU2j1fylTvTBo74E3PstoOxF22SwYEAWiBdR8zREXhrLgKzOSGqhgi1iULmj8SkkhB9VR1OV3bK1pZOj6jxHHibjvc4bYAQ3numIMejuebneGKFMQJxcUE1eSYR4VdQC6gw7dBsAW9emsPp+bazaHBPfKWjiSjADT36+vrjKvhra+tnVWNw8urLOkUVZzhsu7e99dzxwcRzN5/XPaVsZ4GY05USNZgUabJhobyGyWlnSArtCI1PDVgCPsZVfpfWPWoOqQMlXB/ySPiJ/rE0Y3hFwRuXByMsNE5M3vwkyZIMRuQSW0hh0UPnuQX766l76WCBIGRQ8eBWFOeuWEhAxSvNUQ0ynIVk+PFn5VetqWxd84nJNXjNcKUEZ+kdSByzrgGr6MmtzBOWeILBBamP6xOR8p8Tquc8/y+mIDx8LHfC/3cEFmjvKR2IEsJTbQnMtEM+HzwO+35pbagg5o3aONCnD6R9EpzC4eIbuyB1EMZ7mXh+9JIDHCHUcr4/ZiRRe12PSSPN77a9iDkZ+o/pqIxJCng20tYijD5gEBFGdCdQTM9afxgD4zk3lF36Wn/zK89eEGcJ2ukih3FhAn8aLff0ROBpT0MeRwPfzWmOl2TO59m2A3BrMuGBufzPIZTM7cqjj9tnLwDTLGIpFAPo/Pmln8k+SpvH2n1PiVbTQxAplQNpKO/2BWTIAFGZFX9ZwM/3RvcBJZtmqqm8W8rDgv1wwyF0IanHG0wgkNevGdx5Kj8lkZEj1kOcpFGVaAAP7w34VrUVr2a/5PPpXbhiB+3ZnNTHlwtTeLuhDIUTirOmuxuwpeIfV3wIG3RAVxw3qTGIqdkMu/gdGwAeyrWuxAEWpq9W9B1/AfHv5Fs9Rl0b9mej6gaVc98ecnbPqEaf0xTHsGgHl+Kq4oWDenYmN07CtnoCXhOOxrrLeq8yvi/fRN3sC7ZZ4YCDAcJyxuAsM3+9gxtrDHK226OFrzpxDgt7hRPYA2Ca/AHt/Oi3Zv8udc/qX9ouDdy+EF21DkKMCPX4UXdR2jky0p7MBDg2mW4RivFvlRI1U8rfFkXkbdyE314OgSh/iptYIFmcPe0CkFS5V4AovZvTry5DMS7DBhEGKEmW53hnfc72zBcZTOygsFcGBq+flxcns1TwY4Dl2t6U6GO6evJOb3yS+zG6PsDZSQ7J0Vqti3I8NeznnIlCYYxQpJz858GWzSuyo4+sPhhX+9deC95+SmUturqOYrJWfFJ2jWolDU7bcwcee9fdv2n4LUiMVGCsEHJNKtXOLgo1L+QQ5khOoJbW5Eg6eG+scnoqz/VVYHhfIwMMLG+YaQzkYUk9gmT7DnUQQZeUQZW+9tW4YV9omjO2kxB3fkJnYJ4q6eltzfnGmximErvoxOJKHbuFZy2apneU46qStzhnL7lmcYKiyt0IUKbPh+08xNQjNcissxIM+re3jUQAyyjwnUQSG9LanZGe4RPiNGrwAC/ULeEj61+w2ADs2VLUT1+4f6nu/BAyYHELZ9FNLrTqOWt4HLSH0ZZ1XrM89ppr0UN+LM4Nf32UgjmDlaPEp2nsFR8zJQT8Vm/trU8ga81fFbqtlYn2E5vLURjb/SkuKcRspZn5CzglajizFpz/XsmNpikxPSaH1JblGY9p2Vqvlu6gm+jYE5R4TvC1+P/DdckpX7GqoR3oLnp+qF7fkfWqthKlZgjvCF9NDLly2d9KATmFHlibvfsJF8CWRyWM3MGEEO8hz1Sn9UMHzJbqrwBtONnv6pzvNIMthMuOghNKaWExEztMregw5XHdUSR9N1MNKcq20b5Y7bP0VBWyIIb7hUkGCgwej72VdkwBqoJ5VDxWvy1PjXqOhiBTt1+Z2KtQ3dAucH4nGjbYozh8wodvGPz9PczAaZFHhUnqql4FPmTpE5KFfN08Ru8RWwpsqW3jc2cziWpw+LJTC6HUwcIDerX0J7Vs1vJzY1IT75Joy4Cp9iE4lQJJcHyx0BdIoOqNPDnw+p1dJtyWX+KRhx+A2o93vmTpc6nylvmE2GqLKBiEOLdRTAVicG0AplqJnlHzw7FAwVCmyLHOYSAY1rAo86GE5URubXk/wvglZsQG9UEr4/ejyCA79SpPjORfcBSvyRh3BGRUSc1v9icshq+ynceAjRMJz1Alg56s+waFlAarGFknJUmeTo6pDdVTj4mLZ9KVs2x8I1U3L49+h26n/5e4GExRBYKUjFBu1mFrkRvxRxvVszVnEQeQFhLzmUN2ZVZur5zYSshACJKVRGDOUJ7B0Y+Vz9VyVau+OO698iqifB80+3YY5Mkz3KKcPt/e1zzoa2XYK1tKHa213LBAXHFi28x5fpkUnq85k6cdDA+CjzwKpGt6E9zMTvf4rPpu2Vx08T+EwnxVQprtkQ+x3p4xjrOMhc3SOKxII2qZeTb4EkWaHP4qG8nhdRphKAjMKp4AD8browU+uEsFfl8nqcjxIZIIO8XmX8eoV5ayeMtH/6L0Ey6wbgz+02o5YtYPhLd9xje3J1n1qvTaxVi/7807+ZEAGi0ToxaOujaYlldNKp6LX+mKpiBr26qQZMKXflRuWc1qUrD6qyXj/U4Swt+IO5VFtUYRI7VdzrgumgKsgV/vwxkJmbzK1IRS4Tf0tdAuPhkqvQvdenHHu6e0wQrHwq2dXZjRGWzfn2s5DV4/29zo+vjyAvHhep66Bj8rshnSnfPcJPE0fG8OPq0tQ6QHErzi+EVZIvW4lsqA/fyseAzI47ZLlLbZV2fn0430cLpgFoZHyMahNEtHA6Mre90iLi1oCfBHt3KkV3anE+uWoRkmdsZBRT+OHNkdkZCVKhNjhoEQODNZMj9cqu3v8ZsS6R0mfrl61RQ/JHT0Z006fulPH97XGudMaFRwReGk4uvnWU0dhvuSM3LmrVX28CeDxk/KY1unmthyKlHRrnqPjtYJ69W8cufVaijd5IpeezdM6m0paMVYuyIAVf+OkVRMggbn74JnZEuvrezeA7jPImV7MnloNNYl3V/KZ77ZUG8csqnVWzTg0INKoFL9QLsiJQv8EljmU86v2JJondsakyQeobjCbos+0P4MKFbvYp0mwCnVTTt2HhQPab1K2CXGkcmsgA3y5vYzpdXIRPyaVm84EeYiiduqOR6pAZCY2UB3N6Hlt2HdTgMsGWYPJNoEpG+4wAiVzeFidOHYQV7aFaWJqcrJ8hDm4me7J7F3rSvBOkzWv840c7N5l1IFPemGjS4VeoVfseKjq67R4VKXywaSTMaVo3uBzk0tlzvkmzSqOYF3inOFdFIcTGiB9SURTFAasqzNgqa/NHsbGslU9yBuVSF1nnj3VVBNQ53+x/t1oKa6a+BKOBJdLDoBL+l7EVcxNdzZw4CKivJ83+ivf1lLvp/yyEhcQ8w5M3ags1EW62rKOoKMG+4JgFE43wmSYRo/7rioPmFIwY9JdVSviOib8SCIGS+W8e65yEj/B1l7fj/QA88YLgl0K7dTzJAfpULB1UUN/IUWua39eVFHPCOm4R54yNviUYoAQroQ7eNlAkOFwcn3pj+FdVUW5D+78XmVJS1Hq4t9y8QUYGXKigGjn3jusbmPws0WUpFpK6FuiZgxZHVCmyLXJlRqy2rMviB237ch+Q7tkQHSjgQ7uOJ1p6XIUoqZcLlzmBpAYCmJVW1p9ZztGeAgM7KwpHRJ/VJDi+a9YR+GSMPHpmfkcs6gSQyXlRl5izMsijEzorqXS/fc07sr3IrLq4z6Eh/p6Im5KF+2PA/LFo6B2My2LjNvZbtK2sMqaqAesvIB7CGr88Askor/7Jk7966cZ+Dsr5Biaa5dzq7ev8uAxRpygIXqT4UNRvo82emdiUMFfis7IkWDE7EEQ48zqXD7xf/z1TPgRC/X/SpEW5LbyT8pDL7zzzpk15EYstO5dPOr7rHPMzBQ6Wr2mWKMZh00zSdqNvzJbHarePNwo54nNa/4UVHmOiBXeUVoRhM46T5sARJIkHhB0OlQXPVczOONdtw7DCiQ2BlOpBJE7uQohHRNruMO0VqD8GK4jE5UZHSyQrNQAgImi0L91aVThTwsUQWaAiCc+2uqRDtaX3fmwR5+PR+q/qNQNdVshuM6np7EKzcf+H77jC2CoQkNisRCfSGDqStlkZRixFRhfGg4iDnfLD28u4TSh63SNtc8Oaqf+IGUMfEoHwsdmTUkC8BV6DRQgfkegI+Z0agm7elhEEMM9/4wCzkRPs7QvoXUXd99qdCLPADhginUDoTOAlwj9kjLH8jbR+qrmmv426bMtQ5+gK55Gd9h/lu0hpCsJdss7apkMFighALU3ycGHrce8w6jXLc5KfTSi/ixw3GFLKrKuDymmCcCKqvodtF+AfiHaypKYquHBIoZJN3TybkM7MzRlrFl/1sz7UtgmggH+0aUtKdGcFVNKaQ3Dfs0lVAHNE1ftX+oBZ6sm/FS64VMn00LSuCSwx5dAT4HFcNe5QWH35CdODioUBNTDmx9g81ybfCznfMooMpblr8TASretjoh47ePhcRP+RpZvh5zbo3iP5U5HLXvdfpAzU2yDYiTM27kGp9lrvDDhH8++S5nOz0bqpOqRJSctvxnFPXiHROc/G36m+5iO0/sZCMfAAqM9OJb0LzE3Xe/aW606GM2hr5g1nILjDgQYVdHqDRmfmwmlsIkX4wFZ/jiUAryi7dTqc6BvhRfKg5cfodrQI59dIN8xIq1q0db/bk45WLVOmJO7p6GkEMc2Ar+yKMrmOLCWX5StsQSRMFDxJpcI27X091s1Dxx1oOOz6KxX6QTQK04ulyTKd43OrhEWrE0DwaKi2GkXmSGpcaapvJMXSPtebaiJZVqhRTgJc8ju6Ll990iNh85rX8+9MolRUq/OGFT8wlYDRN4D6IoF6OUFGCH7HkSnhCUFrB4ZKJA+rRI6jEEHAvXNp1EsAWUVdA94VWL70v5BScL6MyPTxxHpZTN6tuFqAv25S7CiTgVaqm1T7LuqSlt1gwPJbJaKmBdJKejYV4QhUFCpE/eNe2tIleStDrCHN3nJcTI7lTrCJhHEh3yb048/rZXjT1m77x9XGQH8e0ym1wmk2Ejh/aqXVrA5jsPBRCZ0NRO8SAHQzMB43ZMGqL/hgGrojysgNNsZttYnaEuO9ElaTfJHrffCwfeLWkEZbfff6veDm5ElvQlWOI3uodAwGS4VpgTwSt25cqBkqq3pQ4MKSUyX63uZchKM9RzLLZ19L7BNz6sqmzM5DknmwmISK4TxFgRHuDKanUS5Wx/Y1Zl/Is/RuLpNfkkoZzhoQJ1kdnqaT6nfEEM849+p1s1YKzJDV3UuIezxo7NfZnse1JU4cwx+ZaXf8ZTpmQFkLdQCzlQnhcg/1rIG0ErY86uvAEcvlUC7WBsJec3acRJGUQx/bUudnwwwrkJ/UEpz9YukChezMUJaZ7tbUcPRwgcf6OZwdz31zpKrEDCcpHDxzmQ4boEBr4Gs77hwxpbKzho8OZKYBkice1TCfnU3IGQcDxZPkgxo9/h636kJpEAXs5oDNuCIA5329nQJbegeTMmq08rKfClVce1Bil4bwr8K+AwFWuqwae4ntrqUbaGTEgES99tiKbfJT3g/uDsQq9o50ra3zjnuo7lbB4tHY7cs1BDwCimit1reckNZ9ndFJ0SQZ0FMmGZjk/fQnnG4lFXEFHo50HQt8vWvBzDR6fg8qRqDAkDhH3daVZ/x+c/SXGjtERjwcrCxlnWziShc7TbfF0MG5RO6i873sgoQU0Zk6e7nLvOc4B8sukDMbADCikFpasSL6DNTuMPDPqIftVjm1Im1fKd/7EsPaYjN7y1xfdw3z1SMEc0Dr/TZBR8Z1Ki/cvZ+B0rI87XDeRhP9FltrJ1QJLjL8msNgJWD61C/T49QqFepMM/tTJnDXx1eXZnM8ChSyuLm65sAgOE8v4mBoFuvb1sfG27hW7HLP6AG7O9i8zZu4J3ZvIl6yUeWIlVVI0ZDV6Bd0kdUMhdldRXa40i9RBKk/xqN0hIzNVEn1nc541OBBNuSkbJU4nGzdrXHruHM2n+8CeZXCKIP6CB19BKJEZQpEfm3EmG1UzuaN0XVuj/5O/nFUam91LQzXWenyglgu+jrutwbLwDkMQC8PI5AObgSdwHB/n2F+1ahgWv64UYXsmKijvgx2P4oG4vdnAJfcsu6fCW19fejLgUzt++UbzI1kXd0BTmTd7bpxoBRR9MCe+0caR4FOpsGn1rDf/EyqRhgl+3mcz2219jtuG9TwY6w2wVCPz/bHj+NVfp0X00qBUnoN6dhVKSRHMRWPJS1mhEHkKp/JYWjRFFhvfqoQaXsAlBz0sah66XRJlOqbbcOagJH0wAD3y/8R4I3c6zbYJN4JnvUBqyIKRgpIV9btU0+rGot0MLt8i1HIDWPxhnoUVBiFeas99pBG04FdN6Y8iJ0lGd5EGkjH8GqBRoaqKVQlkkWpuGKZU7F9nZYnyqZQwuM8pwNmGFUupobjjnR2Ro/T7DvQFoQKKTMqlWWDfQy18oTcc+DAxwaaVcIgPAs7+rNUmKhbgskm3y5ry8nXFDBrtR34bCJBDB/ff18im8w1l/iN/uMxHQpaY1hUrz/zcJTa2HtGXBXH5D9sGPheI+p0lP+POKj4CRgdKrrnZS2nW0187aVolH2sFgYNWOKJlKlIMsVpscUs/VYrqIBL/BgsqOpXU/DzXZOQL9uSnGyoQule45HO86v7jGXfKbTYn/g6FvhAUx+Dko+nz4H5zrGeUyQ3MgCmAM6OYq8OUFwSPelDZGDEsYqvDMPgB4U8al0oKFNQzkmmCrpGhuze5omtpLH6OqkXyD60RorgkbL3ZxkkU8VLIZy+Qt1MDkRTBfuwfUx1s7uO+DeeJSZFzH5rMeVQ/lOIbUN9M7tk2B1at0yCpXE8uac7yLky5eDWrE1+j9OYq9YQGnT8l3pYsnk+gFP2KkPz0QN4Uj1tWW6m6g8d0iGCavYtCAA62GS24J3TS9h1tLb9b3ApiNj5a8LiAnepwCvsKYLZ4zNwSwZZFOH/SI6r04HRIUzyU0U7U3IAeQzA3yGsaQ2r1a/mUnvvqkfzbXr42YDHVTt7EP5J/SkZNfHaJfG+9th7IeUvzeVyOgOcWR/KHwwzzFf/l7D4MRUbYcdEKHVXBxo3V+eWSW5ZAtQ8U3e5m2X6ArnpJDVUyRVXFAXx5rLqJBIolaGFtwEysoBnVGjJOP4c25BWiyBwj8pyIAnVr1jganfj235pLea0mBYuUVoyxokaoR9fVaMVePMwfX8e2q+cNYDnNlGv8wck+uMLMWRCGk5+whb78JxQ0IKlshMwf13MoIPMWZgOM3NFRldRNybkapSjHy+avvwU/B4aoCXEp4iGNNkwMPkuhf/PwjtVf/0eeF2g1P9q+DGWxsSg9paTY6gD10AP8IV5HINd8z6cd2VMw/jFGyp7OwNAGjd0Awhju9hI4YIRVPTfQvNtjf1povyafsCMYM49z/IpnKOl+Q07a5IFJc6HYk3CaDTc+lsl015UpAjecYhfIDm8TkE1kKP6/BgGElLIEXs50d2/NTIgGBXr55DWmHIaPF1koQXzFl4cAAtoYaufc6IRasm3bDmvlEIdxLl0JYxhFC95WrVrpS8EMsgU9F7Lh7uyaPEHxKe/sX4D568KYgjEM4a4TaXHgOMZS/T/VNPT+Xi6GlLMmykpdKlk5O/1RT/NQ6Tr70P60UVlDRsewbIRf6bdEgB24jFQB+byJBaO1CvmoOLd2x0+iTQp2MldhHwxw+oL+k/gPnSpF945GKWjlVQ/SRbOcR8ut/iHMdxF7j88yCywIRzivKFGL8ISW0R3rjVd85qXtAdAv5Do9QlyibKJG48xWgx5a7KgbwY9EpOyq4Aw7mt9/Q7VQm2EmaUZFxf70m25MZdpmn5DskY2GV/KaWiB5vgS9rUUVvTcPybXhwgMUKttjOrZOK2pZKg6FdkMudig4BJlbUzMGFVYV5zc3K9C2xT0lnRHYLiwrbV1a9SxxB8cq9jegjbZidTDPKjImQgBQFUnP6jIlunZ3hmd4vg07SDP6aNSE50OmWMrjSACQkWXlks93ybsqIc74IKCpxZHqcVZJmWz1d/ORif9uiZ5MIGBYzPtVy9bBYqMiBjXmp9w+m2zTnEIMztHb9ZIVZMRpL+Q4pehPki296aRicpTUDniBvx5/GzAt4RbZBzn5lcW57KKUOKTdAe4E3CK1MYfAzVzCY4kLO79v7iOuxeB4cpK8mmbxl+MsuOzgFclkZ0xvp0FAX41DgmceqMZ3Ik/rgf85o8OaUggDhEl8jemzM2wX7ghsX9+XA/x7mx52zHYVNoBCYMh+I92oYS5P/QnvAKFiE5ZY6q3QTtW6eHZ5+DX0cQitsirmEfD8sn+4O9cNJlp3xHyNdvDwI7+5dMh+0PYvDwVxnpudYDDCFCbZ4n3HhnJjgBFW2ykGjvrqSGO8H3QYAa99likBiSVaPJ7ccnW9IQ2Rs6CEFhfOxLzsLLJoQe1C9gYsyGHm7lgrokOw1AtkhgF+/UrEyzHhG1Uq7hPzDTw82wlSL84VLojcZiyqkW9mZRF2cxTZq6FS83I5+6NcHkwOtzVdUAK3j5a+D5AngDhnEO0/C0lb2jNqkGw8UsXmCl1AcC38FQxsdYeVrQaDldSQ4k/d9npx1Fdb3WP+PPoAKUXmuRsrHjqYIMgruhFWTJEMiLCwLviQtahMv4uFOPqaziYI7uNTlx1+FFbnFOlNzDTQI0p26fygvDMW0K1iBaLJtETL73tGR6ff5vcRBsFBixJr5hgeJHyzsyEb1szSQpetM5QTmDOZEfK39zH4eh+DRLvVHj7YaquTl23uSTOggiIwGfOgz3iL3tNar9IFZsO8rzBzRvJaFSCT3QLu0oxPZvvaUwJHcZtHKR2YE2xYGjDaJuF8Ob6uW1bDu/drqWfsgdstQjJA8lCkwLxVmYRRcz1Mjd11wHWzOtAzQ4176fXFPFgqtPbbXbWRZLZgcx9rPVORhBxNd2Kwb2xW8LQpzG/3MMJtU5R76fHBCDcus/EV7K5j4VFfZoar+7/C9E9LtdnBLC0t3m726HsMNKd4UupWH/z84NJRNzzL8J8ewHfHcxhGR+6doRw5+L6Lxo5yaDwHUZhL8le1E8RuU02jketzuXtX5scAPhK3IafKUZag+VqlHUU/0A5OecI2Rp4yB5/5ebjLH9CkPHm1GV9zj9jvAffnbgjKDf7LmOwIeZpX/46KYZb/67cKf12EvUtsNSNc2MuVCfti/5h6d3LX2LMjjA4ccNtA4dQNxbUOYivC4gJshzdxR9Z8+rLiZEuuHiXPtykYO+Hd/yffnHTBFKJfvLxSRlrY6PbnBcoCMhQTM1IXJQDs1lM0iYSHizqDBwTApIGxtG2oO7pvQ58fYEdkwp8bxsW8bJ62mxbL26/qKP9ZfE0t7cQ/1FLhGwiq97oLI+qeiHLITvTkNBWrgbfos6NtZ0UhbJry6RfigLsHFS8K9BPuhcKLKalZmYwpgI2wJGRv41966ZsaIwn/vJj9AXlqDHbKo5lXpMT9mSElmytcbyoE6YMFwBle2cU0sFi65S+Wb1QPh62dB+WNk/4s360rmM7dzJKXF8jEOPRyJDG2oJKbioBAuWnRB85moE/rbegTy5uGWWEmdH2mMw9bYHZRVVRcAPWfs7hkuBgFxoqmFgd5So/Z75lGU50jLZRpvKnP3/9zHubwWP7hO1exLuXwNkvvCSeFST9bzHbq8Tvcm39b7pGQ7whGogNb5XBaasYfS111I3tOPBVnp9aWTTB4fy9jUnzC6+rdDbistrz6LKr725N7TnPuaNmXw6RSouabgQ2FAAmreAv5XPLuCMawbb74y0OartusFMZ7tN5yQBTpnn1Cr8CPb1+QE1+XrTkSfln+dZUqBTpujM+ov6vi2kxjRnsKH4DDCUUHQCUjjllBL3xRIUZSKcPWDkAARdQtO4O3NNwkpoizQT7eCDFD9veubQvm2S25WhrihTysoR+Nky4dkl7QHbqwLKj6AGj4YyWtKCNAoe+ThzQH/fWCacdnebSOdPeLlNk7pSqf26UtDlaDknRaX1lMvDBjlWoO90E3A27nOF5KdHmOF+JJuPFPWi8KX1z9Y1K8YR2RmDBO4B7FUU4vQ/lVaayy8jjs31vQT3UvBvNgssxQAT4rv5lAoGqH25O7qR2tMY2XPSOYEb4J0YatNjZt1xOmnShHRuqpyR57YIxCgpmx8x1uw8yNYIJzRb/bS/r/KkUsNGQSCTbNsuL2X4cH8dUX6bs07nqGupR3S/6OGGfepvQGud1JEEiCoj48L68EY0o8G9ElDA1RlTUlLSNvx4f0JGMJqU50rcRMcMRHCQJHmiQHDkrCyd72+GIQnp76IYznXR3l1yNLn7OHvdHn5M2HmYKYTAyJzfd8UAjWtRvghKdtWysbJy08QwMbL4sb8YXlwaIhI/QEJL0Kz6MrlNlQPc6SyyCSO62w4pPEgjxoMKXTDhLyGE2bsnC6rE9ku18EHI7ygq5LCjUYHs0yY5iyljr8GeJkAAsYUC2gh02ngrPRVkGJcku8/Dh/HTA/Ojz69G2Lm5CahhYIldCGgb9vRDbAmuv79lBCGsbTblog55dCQNE8gCwAm7zfrMl5YisNAEVC2xOtxvMPx+U5amUUg+z4onVtEHMtrw6RqhLfCEXEEp1oTxGP12960V8hwa21Clk3z0faYVPk3fm9gEYIfv4WUBBrrvaahoD4aEUMhBdG0eS4ea9FXhr+E6SOhbpKyny4dvzIOEmc/ZqsjHV1So0S2iLSgA7i9OZ0oypZISIYVGUlRkMuX74R7lIc9KsytSQelxkoeM8tlOXuAzYIvqQ2qHHIui2lYPdJd39c5/M+2IqyOZiVp1fzflCXvXSOX3Taj5/U9+xrqgih1ufGZ1q1NcK2xRHuVg//eJLXFFvH2+UJe04QxJ9YOkhEj1jVsPC29ExAaA+e66YB69IzR4XtdwOerwZRBxYPUYleDB4aNEG/Fp3Px7PgMj2LFlh/xYwTA1DF5bRPHPNve160nVT+Uc/etUwQt0Yt8KflQP71j6VmYzIL80z4vE0X0KIqrRxlpbDQ7ikIS5DfZKzAHBIctfKvuz0pMcjtKR6olUynrA+pXaf2oxLP2ckIAAwMFaiOgEUfXU62aTB/ri22MbBI7/s3JGWbW8sO+iyNVnR/KlzWYc/LoLzEJAXtYqnK9jWyJFc5LnvErZeRNXbbE+bwdsHdS0aOo0RX8FFF86YR38JehWHCGgvlDqGj8DHskv9tsb0dQMSvwbadGTX1ty9Yn84N3g0aAHPp52JWjhZ1WotYUo9x6IYoKS/v27INwwgaY+DvUeDvqMeObTiPahI7ak3h/Nvr8BL5jDpqodYh+Ht7+bMxUi6vYk0iiUq3x0hlL0MtxBMjdfjbEvL79M9ivg6UaQIrnnk/7y3vXSootG+FxzOoRkigH6Y7M+bmQnXXKujUo3J+f76mtfe+D05wNo/dz6ucTg5EWkudAHyg9FtA9g821wTCfqnB10kADsrIyCuLYzcKqPNG7WS6zZfRcnzddpRvKxaUbzu/H+nsxjVgjJ+J+dKlQdR9E2nu77MheqfllKjHr+C82G+EiEihQFR9mIc2XCOZ2t38PMUssukE+iRAe6lgfE7XfTbaxooifxeBA/GMndefvdtcKp/Jz+926EbbyuVHJ9ccwYTIvVm6oQ8rhyw/0TXmyZ/DhSMYQgwVu09JzkHTHDin5M9VwnCX66nvhDJwvi4DiCgq8Dpf0gUX3kXyalwo1enzMetiZ69eLPGWQVljqhFAvAWI84qmlwitsNFZRuibZ1KeD+rbg4vu5j30iDcKF95BwHsr7voKO/47HuPcNXcc4hQU4EckdhrnIvLHrIlpQIbgO8X3ZRgb4S7IPrDw5dGUtcGaSZIZtqMeebn8C6jctvGiinbdVZU9Zhn0rB+NdUa3ckBBO68fbNgDKARwqmFbFxt/kkC+UCLO+gfZXpj1WwzZ/HbrBu62ZU8Eyglrc7XTKnktrNwvCd7x/DuP5yHI+1bWALJhmrinsmf/nxQKy5TggEds+xH1aCRPAYjkrHiiJxdKMMZtM01SBu4ba3hjMFw+StBibqCBxr9JqP8n/FHwdb1pWp+76mEaGvlksc+EznUjcas4RPwMTcmtNkOLCKGMNztSnVNkkNMuwHDAqX7bNMtBfCJcvCV1RRtMNRudUnoRqHdhC07bm4jFIwPR+TlQ5Rwrwm2chkW9lGqI5D7TkJMpphIoZ9hc2TmVd9eu036SfMB3nRf4Ypy6bfJo1wkk1HB8FkLVa/uMq6EqRoEVLa51nyVy0LpOarE59Ll+9OdZKH2jPqHcuKV5+T5fDBTopftE8Wg/F7kyee0bhEAP7AJCDTCuVWbG0I6eEn6BUs6iSXHzRGd7YmAhO1CeggNdwebmup4bqEvgg1o3BJH1iDHqjbySyJKmwhEtD6rhvcmcS/jkCXgP5we6nqLkw2U2xq94nPsPQB3KgV+85/1nW709SAlsoxfDv6d5n0b3uGMeS+mkENxPYKoWdLMtY63oSljm60sJRhzVnT5BLslG8WsWmdg0wzBNcK4+PyAIwsCnt3a+PX0Ndn5VsjL3C7SUx1KSxUk9BoYe7bVBvtgwflaX8r0uEmfMAgE1tR3QyPWi1g3UTyiqsqzDpMgL/gOiKBYgap0t0cOM0/WbI0tjonkrO/y2jfdXVXox+H7l+AM2fqzZN01UF0BM5gf41gZ3RwNmUefVgllRCjbk0hlTRopaMCqlz1mavXrchi4Fg9nNWWO9Bn7tGmC8dBk5Kx3/fP2xv9o8y7hcEhhF5G13QYzdSNzEBL0Ax6VVTivvwH6A6m8BKArgDbxc3UJW2elwQYWk1P/cMAKncfYAjAEQ8RMwgwm5+HEjD+Iy4fkJeeAotKXVgclrqPAG2cOozFFwCrtzwpyDn3lS6UURffXSgJcMkKXvuB7MLiUgGjDkbUwCuwvIRyAD4yuMsnN3KdpGj43qe+lbHYQFMQRDhj8WaoYBjmCNVV5INezeCS5mTRc4eDatChxfySC9/T4q8GeZzEVLSo6rZui3Tjm8g/+Y9bDQOpCEwIsotSuf8GwMV8b3759SF6So2MEqWlzKGNaVPmWbiI8p45VGht3JDOC0eIuXIFZz+EL768dbca3aVoUGi0vWoTJCSBgUjcjx4KfCjxVV988Lp1/nznSE+z0CHD4r3rtKR0GWZWj9UJsgYRk7g6+WGbHb0/cwGRbbk+R+73dS+cFMnKKOI+yVAahysQ2ymVp/bq3Tlpt5qFxQe5H7D7dYZcnYMgC++xJllNxnThTbokVg8SRKfoP3m7EBGHTGnPWpU6miJpNn+u6cQFax+0X1Yi2Lws+X+oDi8S6ib7AdRJdQwXTYnXgWj94nI8yI+7SYNSwSS3KFCNfCxvec9Vc1PWzQ67TlP3Ik7YyFK2Z5L9Vk2VXTH+SZeqLinuhlvKV7ghdRybVEiGYY20G3C+Ah6qTnHzvAIEPpHlYQ9OqdnavkBjcBv3n+3VfXLmZAP6KlaX4v03/rlsjCdJAi3b0AuXsiuNOlyOmSvZ4vKJOBdJRM0PnxKcU6PXpoT85Vl/9O2CVhMav8pI4lFgC6+aB2tgEoyREjgw1nUJAecY4gaSSVDis18QFueV4VZmHs3CC2Ki/ig5dPDp3P407jYDoZwR9NdcsimMj9LyA+Hy1UurYaeKXnyQA7vXFhvdr4LnDIH8EcfFgluIDgGw39WTc5H+Aa6Sy6V9Thfa+ZgCFGaIGZhY0eWqvHLpdJ22XdMGxkpKY7tNK6GPxkfANjQ3LLOzBaCBQoz41fG/RZP7ClIJe4TUlVhTEIiHOwUBESA+2xItwmQwalizphFG/TF5HogSf8/HkVf5PR7p/rvoJWPXiszutHZ5qL+6jyqCkHfU6scROushLCWA/DHGwSwWCntugTDfvgwVVXHWNcKyk77nW7Pzjy16jNXNtByXhDGxwgAAA\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}user/update-profile-picture",
							"host": [
								"{{url}}user"
							],
							"path": [
								"update-profile-picture"
							]
						},
						"description": "The \"Update Profile Picture\" API allows users to personalize their profiles by updating their profile pictures within the system. This API is designed to handle image data in the form of an image buffer.\n\n**Key Features:**\n\n- **Method:** POST\n- **Endpoint:** `/update-profile-picture`\n    \n\n**Usage:**\n\n1. To update their profile picture, users can make a POST request to the `/update-profile-picture` endpoint.\n2. Include the user's `access_token` in the \"Authorization\" header of the request, ensuring that the operation is secure and specific to the user.\n3. In the request body, provide the new profile picture as an image buffer. This can be done by attaching the binary image data directly to the request.\n4. Upon successful execution of the API, the user's profile picture is updated with the provided image buffer, allowing for personalization and self-expression within the system.\n    \n\nThe \"Update Profile Picture\" API, which accommodates image buffers in the request body, enhances user engagement and provides a seamless means for users to customize their profiles. The `access_token` in the header ensures the security and user-specific nature of the operation, while the inclusion of the image buffer allows for the direct update of profile pictures."
					},
					"response": []
				},
				{
					"name": "get-user-details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Message\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Get user data successfully.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}user/get-user-details",
							"host": [
								"{{url}}user"
							],
							"path": [
								"get-user-details"
							]
						},
						"description": "The \"Get User Details\" API provides users with the capability to retrieve their own user profile information within the system.\n\n**Key Features:**\n\n- **Method:** GET\n- **Endpoint:** `/get-user-details`\n    \n\n**Usage:**\n\n1. To retrieve their user profile details, users can make a GET request to the `/get-user-details` endpoint.\n2. Include the user's `access_token` in the \"Authorization\" header of the request, ensuring that the operation is secure and specific to the authenticated user.\n3. The API returns the user's profile information, which may include personal details, contact information, account preferences, and other relevant user-specific data.\n    \n\nThe \"Get User Details\" API offers users the ability to access their own profile information, allowing them to view and potentially update their account details as needed. The `access_token` in the header ensures that the operation is secure and limited to the authenticated user's data."
					},
					"response": []
				},
				{
					"name": "delete-user-account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}user/delete-account",
							"host": [
								"{{url}}user"
							],
							"path": [
								"delete-account"
							]
						},
						"description": "The \"Delete User Account\" API enables users to initiate the process of account deletion, enhancing data privacy and user account management.\n\n**Key Features:**\n\n- **Method:** DELETE\n- **Endpoint:** `/delete-account`\n    \n\n**Usage:**\n\n1. To request the deletion of their user account, users can make a DELETE request to the `/delete-account` endpoint.\n    \n2. Include the user's `access_token` in the \"Authorization\" header of the request to ensure the operation is secure and specific to the authenticated user.\n3. Upon successful execution of the API, the system acknowledges the account deletion request, and appropriate measures can be taken to process the request in accordance with data protection regulations.\n    \n\nThe \"Delete User Account\" API is a fundamental feature for user data privacy and account management. It allows users to initiate the account deletion process while ensuring the security of the operation through the inclusion of the `access_token` in the header. This API is essential for compliance with data protection regulations and user account management."
					},
					"response": []
				}
			],
			"description": "The \"Users Module\" serves as a comprehensive suite of APIs designed to manage user-related functionalities within the system. It encompasses a range of key features that facilitate user interactions and account management.\n\n**Key Features:**\n\n1. **Get User:**\n    \n    - **API Name:** Get User\n        \n    - **Description:** Retrieve user data by querying their unique identifiers or attributes. This API provides access to user profiles, enabling efficient information retrieval for personalized user experiences.\n        \n2. **Save User:**\n    \n    - **API Name:** Save User\n        \n    - **Description:** Save user profiles by providing necessary information, such as personal details, contact information, and account preferences.\n        \n3. **Update Profile Picture:**\n    \n    - **API Name:** Update Profile Picture\n        \n    - **Description:** Enable users to update their profile pictures, offering a means of personalization and self-expression within the system. This feature enhances user engagement and the overall user experience.\n        \n4. **Delete User Account:**\n    \n    - **API Name:** Delete User Account\n        \n    - **Description:** Allow users to request the deletion of their accounts, which is essential for user data privacy and account management. This API ensures compliance with data protection regulations.\n        \n\nThe \"Users Module\" consolidates user-related actions, streamlining account management and profile customization. It empowers both users and administrators to efficiently handle user data, maintain account preferences, and personalize profiles, all while adhering to security and privacy standards.\n\nFeel free to modify this description as needed and expand on any specific details or functionalities within your \"Users Module.\""
		},
		{
			"name": "device",
			"item": [
				{
					"name": "clear-device-data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Message\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Device data cleared successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"device_id\": \"31\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}device/clear-data",
							"host": [
								"{{url}}device"
							],
							"path": [
								"clear-data"
							]
						},
						"description": "The \"Clear Device Data\" API empowers users to request the removal of device-related data associated with their accounts, enhancing data privacy and control.\n\n**Key Features:**\n\n- **Method:** POST\n    \n- **Endpoint:** `/clear-data`\n    \n\n**Usage:**\n\n1. To initiate the clearing of device data, users can make a POST request to the `/clear-device-data` endpoint.\n    \n2. Include the user's `access_token` in the \"Authorization\" header of the request, ensuring that the operation is secure and specific to the authenticated user.\n    \n3. In the request body, provide the `device_id` of the device for which data clearance is requested. This device ID is essential for identifying the specific device to clear.\n    \n4. Upon successful execution of the API, the system acknowledges the request for data clearance, and appropriate measures can be taken to clear the device-related data associated with the provided `device_id`."
					},
					"response": []
				},
				{
					"name": "save-device-details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Message\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Device details saved successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"watch_name\":\"L12A\",\n  \"watch_serial_no\":\"s38600\",\n  \"rssi\":\"-60\",\n  \"mac_address\":\"4c:d7:17:4a:5e:f1\"\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}device/device-info",
							"host": [
								"{{url}}device"
							],
							"path": [
								"device-info"
							]
						},
						"description": "The \"Save Device Details\" API is a versatile tool for managing device information within the system. It efficiently creates new device entries or updates existing ones, based on the combination of `user_id` and `mac_Address`.\n\n**Key Features:**\n\n- **Method:** POST\n- **Endpoint:** `/device-info`\n    \n\n**Usage:**\n\n1. To record or update device details, users can make a POST request to the `/device-info` endpoint.\n2. Include the `mac_Address` in the request body, along with other device-specific information.\n3. The system checks if a device entry with the provided `user_id` extracted from access_token and `mac_Address` the combination already exists. If found, the existing entry is updated with the new information. If not found, a new device entry is created.\n4. The API acknowledges the successful operation and provides the user with a confirmation of the device details recorded or updated.\n    \n\nThe \"Save Device Details\" API offers a flexible and efficient approach to managing device information. It ensures that the system maintains accurate device data while optimizing the user experience. This feature streamlines the process of creating and updating device entries based on the combination of `user_id` and `mac_Address`, enhancing the overall system efficiency."
					},
					"response": []
				},
				{
					"name": "get-device-details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Message\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Get watch data successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}device/get-device-info",
							"host": [
								"{{url}}device"
							],
							"path": [
								"get-device-info"
							]
						},
						"description": "The \"Get Device Details\" API allows users to retrieve information about devices associated with their accounts. It operates by extracting the `user_id` from the provided `access_token` and fetching the corresponding device details.\n\n**Key Features:**\n\n- **Method:** GET\n- **Endpoint:** `/get-device-info`\n    \n\n**Usage:**\n\n1. To retrieve device details, users can make a GET request to the `/get-device-info` endpoint.\n    \n2. The API automatically extracts the `user_id` from the `access_token` provided in the request header.\n3. The system uses the extracted `user_id` to fetch device details specifically associated with the authenticated user's account.\n4. The API responds with the device details, which may include device identifiers, types, and other relevant information.\n    \n\nThe \"Get Device Details\" API simplifies device-related information retrieval for users. By utilizing the `user_id` extracted from the `access_token`, it ensures that users can access information specific to their own devices, contributing to a more personalized and user-centric experience within the system."
					},
					"response": []
				}
			],
			"description": "The \"Device Module\" offers a set of APIs to efficiently manage device-related functionalities within the system. It addresses the need to record, retrieve, and clear device data for users.\n\n**Key Features:**\n\n1. **Save Device Details:**\n    \n    - **API Name:** Save Device Details\n        \n    - **Description:** This API allows the system to record and save device-specific information, providing valuable data for user identification and authentication. It's essential for associating user accounts with their devices.\n        \n2. **Get Device Details of Users:**\n    \n    - **API Name:** Get Device Details\n        \n    - **Description:** Users can utilize this API to retrieve information about the devices associated with their accounts. This feature offers transparency and control over the devices linked to their user profiles.\n        \n3. **Clear Device Data:**\n    \n    - **API Name:** Clear Device Data\n        \n    - **Description:** Users can use this API to request the clearing of device-related data associated with their accounts. It enhances data privacy and allows users to manage their connected devices.\n        \n\nThe \"Device Module\" provides a robust framework for managing device-related operations. It aids in device registration, transparency, and data privacy, empowering users to have control over their device data. These APIs are valuable for both user experience and data protection within the system."
		},
		{
			"name": "goals",
			"item": [
				{
					"name": "save-goals",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Message\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Goal added successfully.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"goal_type\": \"calories\",\n  \"goal_value\": 1500\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}goal/post-goal",
							"host": [
								"{{url}}goal"
							],
							"path": [
								"post-goal"
							]
						},
						"description": "The \"Save Goal\" API is a vital tool for users to establish and store their health and fitness goals within the system, helping them achieve a healthier lifestyle.\n\n**Key Features:**\n\n- **Method:** POST\n    \n- **Endpoint:** `/post-goal`\n    \n\n**Usage:**\n\n1. To set and save health and fitness goals, users can make a POST request to the `/post-goal` endpoint.\n    \n2. Include the user's `access_token` in the \"Authorization\" header of the request, ensuring the operation is secure and specific to the authenticated user.\n    \n3. In the request body, provide a JSON object that defines the user's goals. The JSON object can include various attributes, such as daily steps, distance to be walked, calories to be burned, or any other relevant health and fitness goals.\n    \n4. Upon successful execution of the API, the system records the specified goals, making them available for tracking and monitoring as the user progresses toward a healthier lifestyle.\n    \n\nThe \"Save Goal\" API empowers users to take charge of their health and fitness journey by setting personalized goals. The `access_token` in the header ensures the operation's security and user-specific nature, while the JSON object in the request body offers flexibility in defining and storing a variety of health and fitness goals. This functionality is essential for promoting a health-conscious and goal-driven user community."
					},
					"response": []
				},
				{
					"name": "get-goals",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Message\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Goals data fetched successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}goal/get-goals",
							"host": [
								"{{url}}goal"
							],
							"path": [
								"get-goals"
							]
						},
						"description": "The \"Get Goals Data\" API provides users with the capability to retrieve and access their previously established health and fitness goals within the system.\n\n**Key Features:**\n\n- **Method:** GET\n    \n- **Endpoint:** `/get-goals`\n    \n\n**Usage:**\n\n1. To access their health and fitness goals, users can make a GET request to the `/get-goals` endpoint.\n    \n2. The API automatically extracts the `user_id` from the provided `access_token` in the request header.\n    \n3. The system uses the extracted `user_id` to fetch and present the user's health and fitness goals, which include details such as daily steps, distance to be walked, calories to be burned, and other relevant health objectives.\n    \n4. The API responds with the user's established goals, ensuring that they have easy access to this information for tracking and monitoring their progress toward a healthier lifestyle.\n    \n\nThe \"Get Goals Data\" API offers transparency and motivation for users in achieving their health and fitness objectives. By utilizing the `user_id` extracted from the `access_token`, it ensures that users can access and monitor their personalized health goals, contributing to a more informed and goal-oriented user community within the system."
					},
					"response": []
				}
			],
			"description": "The \"Goals Module\" is an integral part of the system, enabling users to define and track their health and fitness goals. It comprises two APIs that allow users to save and retrieve their personalized goals for achieving a healthier lifestyle.\n\n**Key Features:**\n\n1. **Save Goals Data:**\n    \n    - **API Name:** Save Goals Data\n        \n    - **Description:** This API empowers users to set and save their health and fitness goals, such as daily steps, distance to be walked, calories to be burned, and more. It provides a structured approach to goal setting and tracking for a healthier lifestyle.\n        \n2. **Get Goal Data:**\n    \n    - **API Name:** Get Goal Data\n        \n    - **Description:** Users can utilize this API to retrieve their established health and fitness goals. It offers transparency and visibility into their goals, ensuring that they remain aligned with their aspirations.\n        \n\nThe \"Goals Module\" streamlines the process of goal setting and tracking, contributing to users' overall well-being. These APIs facilitate the creation and retrieval of health goals, promoting motivation and accountability in the pursuit of a healthier lifestyle. Users can customize their goals and access them for reference, ultimately fostering a more health-conscious and informed user community."
		},
		{
			"name": "exercise",
			"item": [
				{
					"name": "post-exercise-data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Message\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Exercise data saved  successfully.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"activities\" : [{\n        \"type\": 1,\n        \"startTime\" : 1695945600000,\n        \"endTime\" : 1695949200000,\n        \"validTime\" : 60,\n        \"steps\" : 12000, \n        \"distance\" : 6500, \n        \"calories\" : 520\n    },\n\t{\n        \"type\": 3,\n        \"startTime\" : 1695996000000,\n        \"endTime\" : 1695999600000,\n        \"validTime\" : 60,\n        \"steps\" : 4000, \n        \"distance\" : 1500, \n        \"calories\" : 200\n    }\n\t]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}device/post-exercise-data",
							"host": [
								"{{url}}device"
							],
							"path": [
								"post-exercise-data"
							]
						},
						"description": "The \"Save Exercise Data\" API empowers users to document and preserve exercise-related information within the system, facilitating the tracking and management of their fitness routines.\n\n**Key Features:**\n\n- **Method:** POST\n- **Endpoint:** `/post-exercise-data`\n    \n\n**Usage:**\n\n1. To record exercise-related data, users can make a POST request to the `/post-exercise-data` endpoint.\n2. In the request body, provide a JSON object that includes details of the exercise session. This object can include attributes such as:\n    \n    - `type`: The type or category of exercise (e.g., running, cycling, strength training, etc.).\n        \n    - `calories`: The estimated number of calories burned during the exercise session.\n        \n    - `steps`: The number of steps taken during the exercise.\n        \n    - `startTime`: The start time of the exercise session.\n        \n    - `endTime`: The end time of the exercise session.\n        \n3. The system records and stores the provided exercise data, enabling users to keep track of their fitness activities and progress.\n4. Upon successful execution of the API, the system confirms the recording of exercise data, making it available for users to reference and use in their fitness journey.\n    \n\nThe \"Save Exercise Data\" API offers a structured approach to recording exercise information, ensuring that users can efficiently track their fitness routines. By using a JSON object in the request body, users can provide detailed exercise data for comprehensive tracking and management. This functionality promotes an active and health-conscious user community within the system."
					},
					"response": []
				},
				{
					"name": "get-exercise-data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Messsage\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Exercise data fetched successfully.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjUyNzFiMjMwLTUwOTQtNGFmZi04YWM4LTI1ZmZiNDY0OTY5ZSIsIm5hbWUiOiJMYXZhIE1vYmlsZSIsIm1vYmlsZV9udW1iZXIiOiIiLCJlbWFpbCI6ImxhdmF3b3JraWRAZ21haWwuY29tIiwiZGV2aWNlX2lkIjoiMDdiODA4NTQ2NDFiY2E3YyIsImlhdCI6MTY5NzgwMzY2MywiZXhwIjoxNzAwMzk1NjYzfQ.fqYQ4ANw6rbZD4jXVopjKqLv-fxj_qiRVlH5HHaxZIE",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}device/all/1/get-exercise-data",
							"host": [
								"{{url}}device"
							],
							"path": [
								"all",
								"1",
								"get-exercise-data"
							]
						},
						"description": "The \"Get Exercise Data\" API allows users to retrieve their recorded exercise-related data from a specific page within the device. The API operates based on the `exerciseType` and `page` parameters in the URL, while authentication is provided through the `access_token`.\n\n**Key Features:**\n\n- **Method:** GET\n    \n- **Endpoint:** `/device/{exerciseType}/{page}/get-exercise-data`\n    \n\n**Usage:**\n\n1. To access exercise data, users can make a GET request to the endpoint `/device/{exerciseType}/{page}/get-exercise-data`.\n    \n2. Include the user's `access_token` in the \"Authorization\" header of the request, ensuring the operation is secure and specific to the authenticated user.\n    \n3. The `exerciseType` parameter in the URL specifies the type or category of exercise for which the user wants to retrieve data.\n    \n4. The `page` parameter in the URL indicates the specific page or location within the device from which the exercise data should be retrieved.\n    \n5. The system retrieves and presents the exercise data associated with the provided `exerciseType` and `page`, including details such as exercise type, calories burned, steps count, start time, and end time.\n    \n6. The API responds with the user's exercise history, making it accessible for tracking, reviewing, and evaluating their fitness activities.\n    \n\nThe \"Get Exercise Data\" API offers a comprehensive view of exercise history within a specific device location. Users can monitor their fitness routines, and with the inclusion of `access_token` in the header, the operation remains secure and user-specific. This feature supports their fitness goals and lifestyle choices within the system."
					},
					"response": []
				}
			],
			"description": "The \"Exercise Module\" is a fundamental component within the system, designed to support users in their exercise and fitness routines. It comprises two APIs that allow users to save and access their exercise-related data.\n\n**Key Features:**\n\n1. **Save Exercise Data:**\n    \n    - **API Name:** Save Exercise Data\n        \n    - **Description:** This API empowers users to record and store their exercise data, including workout types, duration, intensity, and other relevant details. It provides a structured approach to tracking and managing exercise routines.\n        \n2. **Get Exercise Data:**\n    \n    - **API Name:** Get Exercise Data\n        \n    - **Description:** Users can utilize this API to retrieve their recorded exercise data. It offers transparency and visibility into their exercise history, aiding in performance tracking and personal fitness goals.\n        \n\nThe \"Exercise Module\" simplifies the process of tracking exercise data and promotes an active and healthy lifestyle. These APIs enable users to record and retrieve their exercise-related information, facilitating their fitness journey and helping them stay on track toward their health and fitness goals."
		},
		{
			"name": "heartrate",
			"item": [
				{
					"name": "post-heart-rate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Messsage\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Heart rate data saved successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data_arr\": [\n        {\n            \"readings\": [\n                79,\n                94,\n                63,\n                100,\n                71,\n                65,\n                90,\n                85,\n                95,\n                88,\n                55,\n                75,\n                64,\n                87,\n                75,\n                77,\n                94,\n                94,\n                92,\n                97,\n                72,\n                87,\n                98,\n                0,\n                0,\n                83,\n                92,\n                99,\n                0,\n                0,\n                99,\n                0,\n                87,\n                66,\n                85,\n                92,\n                92,\n                93,\n                95,\n                81,\n                45,\n                70,\n                89,\n                88,\n                76,\n                87,\n                69,\n                81\n            ],\n            \"start_time\": 1680331572000,\n            \"interval_seconds\": 1800,\n            \"datetime\": 1680331572000\n        },\n        {\n            \"readings\": [\n                79,\n                94,\n                63,\n                100,\n                95,\n                65,\n                70,\n                85,\n                95,\n                54,\n                68,\n                75,\n                64,\n                87,\n                85,\n                77,\n                94,\n                33,\n                92,\n                98,\n                77,\n                87,\n                98,\n                86,\n                91,\n                83,\n                92,\n                99,\n                90,\n                97,\n                0,\n                94,\n                0,\n                72,\n                85,\n                92,\n                92,\n                0,\n                95,\n                81,\n                67,\n                70,\n                100,\n                88,\n                66,\n                75,\n                69,\n                81\n            ],\n            \"start_time\": 1680417972000,\n            \"interval_seconds\": 1800,\n            \"datetime\": 1680417972000\n        },\n        {\n            \"readings\": [\n                79,\n                94,\n                63,\n                100,\n                71,\n                65,\n                70,\n                88,\n                95,\n                88,\n                68,\n                75,\n                64,\n                89,\n                85,\n                77,\n                100,\n                94,\n                92,\n                97,\n                72,\n                87,\n                98,\n                110,\n                98,\n                83,\n                92,\n                99,\n                86,\n                97,\n                99,\n                94,\n                125,\n                72,\n                85,\n                92,\n                95,\n                93,\n                95,\n                81,\n                86,\n                70,\n                100,\n                88,\n                0,\n                75,\n                0,\n                81\n            ],\n            \"start_time\": 1680504372000,\n            \"interval_seconds\": 1800,\n            \"datetime\": 1680504372000\n        },\n        {\n            \"readings\": [\n                79,\n                94,\n                63,\n                100,\n                71,\n                65,\n                70,\n                85,\n                95,\n                56,\n                93,\n                75,\n                64,\n                87,\n                85,\n                77,\n                66,\n                94,\n                92,\n                97,\n                72,\n                87,\n                98,\n                86,\n                76,\n                83,\n                92,\n                99,\n                86,\n                97,\n                99,\n                94,\n                67,\n                72,\n                85,\n                86,\n                92,\n                0,\n                95,\n                81,\n                67,\n                0,\n                0,\n                88,\n                76,\n                100,\n                110,\n                124\n            ],\n            \"start_time\": 1694500180000,\n            \"interval_seconds\": 1800,\n            \"datetime\": 1694500180000\n        },\n        {\n            \"readings\": [\n                79,\n                56,\n                63,\n                100,\n                71,\n                88,\n                70,\n                85,\n                95,\n                88,\n                124,\n                75,\n                64,\n                87,\n                85,\n                77,\n                94,\n                94,\n                114,\n                97,\n                72,\n                87,\n                98,\n                86,\n                91,\n                83,\n                92,\n                99,\n                102,\n                78,\n                89,\n                94,\n                67,\n                72,\n                85,\n                92,\n                115,\n                96,\n                34,\n                88,\n                67,\n                70,\n                90,\n                121,\n                76,\n                88,\n                69,\n                81\n            ],\n            \"start_time\": 1696487380000,\n            \"interval_seconds\": 1800,\n            \"datetime\": 1696487380000\n        },\n        {\n            \"readings\": [\n                79,\n                94,\n                63,\n                98,\n                71,\n                65,\n                70,\n                85,\n                95,\n                121,\n                68,\n                75,\n                64,\n                87,\n                85,\n                77,\n                94,\n                100,\n                92,\n                97,\n                72,\n                87,\n                98,\n                86,\n                88,\n                83,\n                92,\n                99,\n                86,\n                97,\n                99,\n                122,\n                67,\n                72,\n                85,\n                70,\n                92,\n                93,\n                95,\n                55,\n                67,\n                70,\n                132,\n                88,\n                76,\n                75,\n                112,\n                81\n            ],\n            \"start_time\": 1696573780000,\n            \"interval_seconds\": 1800,\n            \"datetime\": 1696573780000\n        },\n        {\n            \"readings\": [\n                79,\n                94,\n                63,\n                121,\n                71,\n                65,\n                70,\n                85,\n                95,\n                88,\n                68,\n                75,\n                64,\n                87,\n                85,\n                142,\n                94,\n                100,\n                92,\n                97,\n                72,\n                87,\n                98,\n                86,\n                88,\n                83,\n                92,\n                132,\n                86,\n                97,\n                99,\n                40,\n                67,\n                72,\n                85,\n                70,\n                92,\n                93,\n                95,\n                55,\n                67,\n                70,\n                112,\n                88,\n                76,\n                75,\n                69,\n                81\n            ],\n            \"start_time\": 1696660180000,\n            \"interval_seconds\": 1800,\n            \"datetime\": 1696660180000\n        },{\n            \"readings\": [\n                79,\n                94,\n                63,\n                112,\n                71,\n                65,\n                70,\n                85,\n                95,\n                88,\n                68,\n                75,\n                64,\n                87,\n                122,\n                77,\n                94,\n                100,\n                92,\n                97,\n                72,\n                87,\n                98,\n                86,\n                88,\n                83,\n                133,\n                99,\n                86,\n                97,\n                99,\n                40,\n                67,\n                72,\n                85,\n                70,\n                92,\n                93,\n                142,\n                55,\n                67,\n                70,\n                37,\n                88,\n                76,\n                75,\n                117,\n                81\n            ],\n            \"start_time\": 1696746580000,\n            \"interval_seconds\": 1800,\n            \"datetime\": 1696746580000\n        },{\n            \"readings\": [\n                79,\n                94,\n                63,\n                116,\n                71,\n                65,\n                70,\n                85,\n                95,\n                88,\n                68,\n                75,\n                64,\n                87,\n                85,\n                114,\n                94,\n                100,\n                92,\n                97,\n                72,\n                87,\n                98,\n                86,\n                88,\n                0,\n                0,\n                0,\n                86,\n                97,\n                142,\n                40,\n                67,\n                72,\n                85,\n                70,\n                92,\n                93,\n                95,\n                55,\n                67,\n                70,\n                37,\n                100,\n                76,\n                75,\n                69,\n                81\n            ],\n            \"start_time\": 1696832980000,\n            \"interval_seconds\": 1800,\n            \"datetime\": 1696832980000\n        },{\n            \"readings\": [\n                79,\n                94,\n                63,\n                98,\n                71,\n                65,\n                70,\n                85,\n                95,\n                88,\n                122,\n                75,\n                64,\n                87,\n                85,\n                77,\n                94,\n                100,\n                92,\n                97,\n                72,\n                87,\n                98,\n                86,\n                88,\n                83,\n                92,\n                99,\n                122,\n                97,\n                99,\n                40,\n                67,\n                72,\n                85,\n                70,\n                92,\n                93,\n                95,\n                55,\n                131,\n                70,\n                37,\n                88,\n                76,\n                75,\n                135,\n                81\n            ],\n            \"start_time\": 1696919380000,\n            \"interval_seconds\": 1800,\n            \"datetime\": 1696919380000\n        },{\n            \"readings\": [\n                79,\n                94,\n                63,\n                98,\n                71,\n                65,\n                70,\n                85,\n                95,\n                88,\n                125,\n                75,\n                64,\n                87,\n                85,\n                77,\n                94,\n                100,\n                92,\n                97,\n                72,\n                87,\n                98,\n                86,\n                88,\n                126,\n                92,\n                99,\n                86,\n                97,\n                99,\n                40,\n                67,\n                72,\n                127,\n                70,\n                92,\n                93,\n                95,\n                55,\n                67,\n                70,\n                37,\n                88,\n                122,\n                75,\n                69,\n                81\n            ],\n            \"start_time\": 1697005780000,\n            \"interval_seconds\": 1800,\n            \"datetime\": 1697005780000\n        },{\n            \"readings\": [\n                79,\n                94,\n                63,\n                98,\n                71,\n                65,\n                70,\n                85,\n                95,\n                88,\n                68,\n                75,\n                122,\n                87,\n                85,\n                77,\n                94,\n                100,\n                92,\n                97,\n                72,\n                87,\n                98,\n                86,\n                132,\n                83,\n                92,\n                99,\n                86,\n                97,\n                99,\n                40,\n                67,\n                72,\n                85,\n                70,\n                111,\n                93,\n                95,\n                55,\n                67,\n                70,\n                37,\n                88,\n                76,\n                121,\n                69,\n                81\n            ],\n            \"start_time\": 1697092180000,\n            \"interval_seconds\": 1800,\n            \"datetime\": 1697092180000\n        },{\n            \"readings\": [\n                79,\n                94,\n                63,\n                98,\n                71,\n                65,\n                70,\n                85,\n                95,\n                111,\n                68,\n                75,\n                64,\n                87,\n                85,\n                77,\n                94,\n                100,\n                112,\n                97,\n                72,\n                87,\n                98,\n                86,\n                88,\n                83,\n                92,\n                99,\n                86,\n                97,\n                111,\n                40,\n                67,\n                72,\n                85,\n                70,\n                92,\n                93,\n                95,\n                55,\n                67,\n                121,\n                37,\n                88,\n                76,\n                75,\n                69,\n                81\n            ],\n            \"start_time\": 1697178580000,\n            \"interval_seconds\": 1800,\n            \"datetime\": 1697178580000\n        },{\n            \"readings\": [\n                79,\n                94,\n                63,\n                98,\n                71,\n                65,\n                70,\n                85,\n                111,\n                88,\n                68,\n                75,\n                64,\n                87,\n                85,\n                77,\n                94,\n                100,\n                92,\n                97,\n                72,\n                87,\n                98,\n                86,\n                88,\n                83,\n                92,\n                99,\n                86,\n                122,\n                99,\n                40,\n                67,\n                72,\n                85,\n                70,\n                92,\n                93,\n                133,\n                55,\n                67,\n                70,\n                37,\n                88,\n                76,\n                75,\n                69,\n                81\n            ],\n            \"start_time\": 1697264980000,\n            \"interval_seconds\": 1800,\n            \"datetime\": 1697264980000\n        },{\n            \"readings\": [\n                79,\n                94,\n                115,\n                98,\n                71,\n                65,\n                70,\n                85,\n                95,\n                88,\n                68,\n                75,\n                64,\n                87,\n                116,\n                77,\n                94,\n                100,\n                92,\n                97,\n                72,\n                87,\n                98,\n                86,\n                88,\n                83,\n                92,\n                99,\n                86,\n                97,\n                99,\n                40,\n                117,\n                72,\n                85,\n                70,\n                92,\n                93,\n                95,\n                55,\n                67,\n                70,\n                37,\n                88,\n                76,\n                144,\n                69,\n                81\n            ],\n            \"start_time\": 1697351380000,\n            \"interval_seconds\": 1800,\n            \"datetime\": 1697351380000\n        },{\n            \"readings\": [\n                79,\n                94,\n                63,\n                98,\n                71,\n                65,\n                70,\n                85,\n                95,\n                88,\n                68,\n                75,\n                121,\n                87,\n                85,\n                77,\n                94,\n                100,\n                92,\n                97,\n                72,\n                87,\n                98,\n                86,\n                88,\n                83,\n                92,\n                111,\n                86,\n                97,\n                99,\n                40,\n                67,\n                72,\n                85,\n                70,\n                92,\n                93,\n                95,\n                55,\n                67,\n                70,\n                113,\n                88,\n                76,\n                75,\n                69,\n                81\n            ],\n            \"start_time\": 1697437780000,\n            \"interval_seconds\": 1800,\n            \"datetime\": 1697437780000\n        },{\n            \"readings\": [\n                79,\n                94,\n                63,\n                98,\n                71,\n                65,\n                131,\n                85,\n                95,\n                88,\n                68,\n                75,\n                64,\n                87,\n                85,\n                77,\n                94,\n                100,\n                92,\n                97,\n                72,\n                87,\n                98,\n                86,\n                88,\n                83,\n                92,\n                99,\n                86,\n                97,\n                99,\n                40,\n                67,\n                132,\n                85,\n                70,\n                92,\n                93,\n                95,\n                55,\n                67,\n                70,\n                37,\n                88,\n                76,\n                111,\n                69,\n                81\n            ],\n            \"start_time\": 1697524180000,\n            \"interval_seconds\": 1800,\n            \"datetime\": 1697524180000\n        },{\n            \"readings\": [\n                79,\n                94,\n                63,\n                142,\n                71,\n                65,\n                70,\n                85,\n                95,\n                88,\n                68,\n                75,\n                64,\n                87,\n                85,\n                77,\n                94,\n                100,\n                92,\n                97,\n                72,\n                87,\n                98,\n                132,\n                88,\n                83,\n                92,\n                99,\n                86,\n                97,\n                99,\n                40,\n                67,\n                72,\n                85,\n                122,\n                92,\n                93,\n                95,\n                55,\n                67,\n                70,\n                37,\n                88,\n                152,\n                75,\n                69,\n                81\n            ],\n            \"start_time\": 1697610580000,\n            \"interval_seconds\": 1800,\n            \"datetime\": 1697610580000\n        },{\n            \"readings\": [\n                79,\n                94,\n                63,\n                98,\n                71,\n                65,\n                70,\n                85,\n                95,\n                88,\n                68,\n                99,\n                64,\n                87,\n                85,\n                77,\n                94,\n                100,\n                92,\n                97,\n                72,\n                95,\n                98,\n                86,\n                88,\n                83,\n                92,\n                99,\n                86,\n                97,\n                99,\n                40,\n                67,\n                59,\n                85,\n                70,\n                92,\n                93,\n                95,\n                55,\n                67,\n                70,\n                95,\n                88,\n                76,\n                75,\n                69,\n                81\n            ],\n            \"start_time\": 1697696980000,\n            \"interval_seconds\": 1800,\n            \"datetime\": 1697696980000\n        },{\n            \"readings\": [\n                79,\n                94,\n                63,\n                98,\n                71,\n                65,\n                96,\n                85,\n                95,\n                88,\n                68,\n                75,\n                90,\n                87,\n                85,\n                77,\n                94,\n                100,\n                92,\n                97,\n                72,\n                87,\n                98,\n                86,\n                88,\n                83,\n                92,\n                99,\n                70,\n                50,\n                99,\n                40,\n                67,\n                72,\n                85,\n                77,\n                92,\n                93,\n                95,\n                55,\n                67,\n                88,\n                37,\n                88,\n                76,\n                77,\n                69,\n                81\n            ],\n            \"start_time\": 1697783380000,\n            \"interval_seconds\": 1800,\n            \"datetime\": 1697783380000\n        },{\n            \"readings\": [\n                79,\n                94,\n                63,\n                89,\n                71,\n                65,\n                70,\n                88,\n                95,\n                88,\n                68,\n                75,\n                64,\n                87,\n                85,\n                77,\n                94,\n                100,\n                92,\n                97,\n                90,\n                87,\n                98,\n                86,\n                88,\n                99,\n                92,\n                99,\n                86,\n                97,\n                99,\n                40,\n                67,\n                72,\n                99,\n                70,\n                92,\n                93,\n                95,\n                55,\n                67,\n                70,\n                37,\n                88,\n                76,\n                75,\n                99,\n                81\n            ],\n            \"start_time\": 1697869780000,\n            \"interval_seconds\": 1800,\n            \"datetime\": 1697869780000\n        },{\n            \"readings\": [\n                79,\n                94,\n                63,\n                98,\n                88,\n                65,\n                70,\n                85,\n                95,\n                88,\n                68,\n                75,\n                64,\n                87,\n                85,\n                77,\n                94,\n                100,\n                92,\n                97,\n                72,\n                87,\n                98,\n                89,\n                88,\n                83,\n                92,\n                99,\n                86,\n                97,\n                99,\n                40,\n                98,\n                72,\n                85,\n                70,\n                92,\n                93,\n                95,\n                55,\n                67,\n                98,\n                37,\n                88,\n                76,\n                75,\n                69,\n                99\n            ],\n            \"start_time\": 1697956180000,\n            \"interval_seconds\": 1800,\n            \"datetime\": 1697956180000\n        },{\n            \"readings\": [\n                79,\n                94,\n                63,\n                98,\n                71,\n                99,\n                70,\n                85,\n                95,\n                88,\n                68,\n                75,\n                64,\n                87,\n                89,\n                77,\n                94,\n                100,\n                92,\n                97,\n                98,\n                87,\n                98,\n                86,\n                88,\n                83,\n                92,\n                99,\n                86,\n                79,\n                99,\n                40,\n                67,\n                72,\n                85,\n                70,\n                92,\n                93,\n                97,\n                55,\n                67,\n                70,\n                37,\n                88,\n                97,\n                75,\n                69,\n                0\n            ],\n            \"start_time\": 1698042580000,\n            \"interval_seconds\": 1800,\n            \"datetime\": 1698042580000\n        },{\n            \"readings\": [\n                79,\n                94,\n                63,\n                98,\n                88,\n                65,\n                70,\n                85,\n                95,\n                88,\n                68,\n                75,\n                64,\n                98,\n                85,\n                77,\n                94,\n                100,\n                92,\n                97,\n                72,\n                87,\n                98,\n                86,\n                88,\n                83,\n                92,\n                99,\n                98,\n                97,\n                99,\n                40,\n                67,\n                72,\n                85,\n                70,\n                92,\n                93,\n                95,\n                55,\n                67,\n                70,\n                37,\n                88,\n                76,\n                75,\n                98,\n                81\n            ],\n            \"start_time\": 1698128980000,\n            \"interval_seconds\": 1800,\n            \"datetime\": 1698128980000\n        },{\n            \"readings\": [\n                79,\n                94,\n                63,\n                98,\n                71,\n                65,\n                70,\n                85,\n                95,\n                88,\n                68,\n                75,\n                64,\n                98,\n                85,\n                77,\n                94,\n                100,\n                92,\n                97,\n                72,\n                87,\n                88,\n                86,\n                88,\n                83,\n                92,\n                99,\n                111,\n                97,\n                99,\n                88,\n                67,\n                72,\n                85,\n                70,\n                92,\n                93,\n                95,\n                111,\n                112,\n                70,\n                132,\n                88,\n                76,\n                75,\n                69,\n                81\n            ],\n            \"start_time\": 1698215380000,\n            \"interval_seconds\": 1800,\n            \"datetime\": 1698215380000\n        },{\n            \"readings\": [\n                79,\n                94,\n                63,\n                123,\n                71,\n                65,\n                70,\n                85,\n                95,\n                88,\n                68,\n                75,\n                64,\n                87,\n                123,\n                77,\n                94,\n                100,\n                92,\n                97,\n                72,\n                87,\n                98,\n                86,\n                88,\n                83,\n                92,\n                99,\n                86,\n                97,\n                99,\n                40,\n                67,\n                72,\n                85,\n                32,\n                92,\n                93,\n                95,\n                55,\n                67,\n                70,\n                37,\n                88,\n                76,\n                122,\n                69,\n                81\n            ],\n            \"start_time\": 1698301780000,\n            \"interval_seconds\": 1800,\n            \"datetime\": 1698301780000\n        },{\n            \"readings\": [\n                79,\n                94,\n                63,\n                111,\n                71,\n                65,\n                70,\n                85,\n                95,\n                88,\n                68,\n                75,\n                64,\n                87,\n                85,\n                121,\n                94,\n                100,\n                92,\n                97,\n                72,\n                87,\n                98,\n                86,\n                88,\n                83,\n                92,\n                111,\n                86,\n                97,\n                99,\n                40,\n                67,\n                72,\n                85,\n                70,\n                92,\n                93,\n                95,\n                131,\n                67,\n                70,\n                37,\n                88,\n                111,\n                75,\n                69,\n                81\n            ],\n            \"start_time\": 1698388180000,\n            \"interval_seconds\": 1800,\n            \"datetime\": 1698388180000\n        },{\n            \"readings\": [\n                79,\n                94,\n                111,\n                98,\n                71,\n                65,\n                70,\n                85,\n                95,\n                88,\n                68,\n                112,\n                64,\n                87,\n                85,\n                77,\n                94,\n                100,\n                92,\n                97,\n                72,\n                87,\n                98,\n                121,\n                88,\n                83,\n                92,\n                99,\n                86,\n                97,\n                99,\n                40,\n                131,\n                72,\n                85,\n                70,\n                92,\n                93,\n                95,\n                55,\n                67,\n                70,\n                37,\n                88,\n                133,\n                75,\n                69,\n                81\n            ],\n            \"start_time\": 1698474580000,\n            \"interval_seconds\": 1800,\n            \"datetime\": 1698474580000\n        },{\n            \"readings\": [\n                79,\n                94,\n                111,\n                98,\n                71,\n                65,\n                70,\n                85,\n                95,\n                88,\n                68,\n                112,\n                64,\n                87,\n                85,\n                77,\n                94,\n                100,\n                92,\n                97,\n                72,\n                87,\n                98,\n                111,\n                88,\n                83,\n                92,\n                99,\n                86,\n                97,\n                99,\n                40,\n                112,\n                72,\n                85,\n                70,\n                92,\n                93,\n                95,\n                55,\n                67,\n                113,\n                37,\n                88,\n                76,\n                75,\n                69,\n                111\n            ],\n            \"start_time\": 1698560980000,\n            \"interval_seconds\": 1800,\n            \"datetime\": 1698560980000\n        },{\n            \"readings\": [\n                79,\n                94,\n                63,\n                98,\n                71,\n                132,\n                70,\n                85,\n                95,\n                88,\n                68,\n                122,\n                64,\n                87,\n                85,\n                77,\n                94,\n                100,\n                92,\n                97,\n                133,\n                87,\n                98,\n                86,\n                88,\n                83,\n                92,\n                99,\n                86,\n                111,\n                99,\n                40,\n                67,\n                72,\n                85,\n                70,\n                92,\n                93,\n                131,\n                55,\n                67,\n                70,\n                37,\n                88,\n                121,\n                75,\n                69,\n                111\n            ],\n            \"start_time\": 1698647380000,\n            \"interval_seconds\": 1800,\n            \"datetime\": 1698647380000\n        },{\n            \"readings\": [\n                79,\n                94,\n                111,\n                98,\n                71,\n                65,\n                70,\n                85,\n                95,\n                88,\n                68,\n                110,\n                64,\n                87,\n                85,\n                77,\n                94,\n                100,\n                92,\n                97,\n                72,\n                100,\n                98,\n                86,\n                88,\n                83,\n                92,\n                100,\n                86,\n                97,\n                99,\n                40,\n                67,\n                72,\n                85,\n                100,\n                92,\n                93,\n                95,\n                55,\n                131,\n                70,\n                37,\n                88,\n                221,\n                75,\n                134,\n                81\n            ],\n            \"start_time\": 1698733780000,\n            \"interval_seconds\": 1800,\n            \"datetime\": 1698733780000\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}device/post-heart-rate",
							"host": [
								"{{url}}device"
							],
							"path": [
								"post-heart-rate"
							]
						},
						"description": "The \"Save Heart Rate Data\" API empowers users to record and store their heart rate data within the system, enabling the tracking and management of cardiovascular health.\n\n**Key Features:**\n\n- **Method:** POST\n- **Endpoint:** `/post-heart-rate`\n    \n\n**Usage:**\n\n1. To record heart rate data, users can make a POST request to the `/post-heart-rate` endpoint.\n2. Include the user's `access_token` in the \"Authorization\" header of the request, ensuring the operation is secure and specific to the authenticated user.\n3. In the request body, provide a JSON object that includes the heart rate data. This object can contain attributes such as:\n    - `timestamp`: The date and time of the heart rate reading.\n    - `heart_rate_value`: The recorded heart rate value.\n    - Additional relevant data as needed.\n4. The system records and stores the provided heart rate data, allowing users to track their cardiovascular health over time.\n5. Upon successful execution of the API, the system confirms the recording of heart rate data, making it available for users to review and analyze their cardiovascular health.\n    \n\nThe \"Save Heart Rate Data\" API supports users in maintaining and monitoring their cardiovascular health. By including the `access_token` in the header and providing a JSON object in the request body, users can efficiently record their heart rate data, ultimately aiding in their health and wellness journey."
					},
					"response": []
				},
				{
					"name": "get-heartrate-data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Success Response\");",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.value).to.eql(100);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}device/heart-rate/day/1696135262000/1698727262000",
							"host": [
								"{{url}}device"
							],
							"path": [
								"heart-rate",
								"day",
								"1696135262000",
								"1698727262000"
							]
						},
						"description": "The \"Get Heart Rate Data\" API offers users the ability to retrieve their heart rate data based on a specified frequency, spanning from a designated `fromDate` to a `toDate`. This API requires the `access_token` in the header for user authentication.\n\n**Key Features:**\n\n- **Method:** GET\n    \n- **Endpoint:** `/device/heart-rate/day/{fromDate}/{toDate}`\n    \n\n**Usage:**\n\n1. To access heart rate data, users can make a GET request to the endpoint `/device/heart-rate/day/{fromDate}/{toDate}`.\n    \n2. Include the user's `access_token` in the \"Authorization\" header of the request, ensuring that the operation is secure and specific to the authenticated user.\n    \n3. Define the `fromDate` and `toDate` parameters in the URL to set the date range for the data retrieval. The API will retrieve heart rate data within this specified time frame.\n    \n4. The system retrieves and presents the heart rate data based on the selected frequency and the provided date range.\n    \n5. The API responds with the heart rate data, allowing users to analyze and monitor their cardiovascular health within the specified time period.\n    \n\nThe \"Get Heart Rate Data\" API provides users with a detailed view of their heart rate information based on their chosen frequency and date range. The `access_token` in the header ensures that the operation is secure and limited to the authenticated user's data. This functionality supports users in maintaining and monitoring their cardiovascular health effectively."
					},
					"response": []
				},
				{
					"name": "get-monthly-heartrate-data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Success Response\");",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.value).to.eql(100);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}device/heart-rate/fixmonth/2023-10",
							"host": [
								"{{url}}device"
							],
							"path": [
								"heart-rate",
								"fixmonth",
								"2023-10"
							]
						},
						"description": "The \"Get Fixed-Month Heart Rate Data\" API enables users to access heart rate data specifically for a fixed month identified by the `monthKey` parameter. Authentication is provided through the `access_token` in the header.\n\n**Key Features:**\n\n- **Method:** GET\n    \n- **Endpoint:** `/device/heart-rate/fixmonth/{monthKey}`\n    \n\n**Usage:**\n\n1. To retrieve heart rate data for a specific month, users can make a GET request to the endpoint `/device/heart-rate/fixmonth/{monthKey}`.\n    \n2. Include the user's `access_token` in the \"Authorization\" header of the request, ensuring that the operation is secure and specific to the authenticated user.\n    \n3. Specify the `monthKey` parameter in the URL to indicate the target month for heart rate data retrieval. The API will retrieve heart rate data for the specified month.\n    \n4. The system retrieves and presents the heart rate data for the fixed month as indicated by the `monthKey`.\n    \n5. The API responds with the heart rate data for the selected month, allowing users to analyze and monitor their cardiovascular health within that specific time frame.\n    \n\nThe \"Get Fixed-Month Heart Rate Data\" API provides a focused view of heart rate information for a designated month, making it convenient for users to track their cardiovascular health during specific time periods. The `access_token` in the header ensures that the operation is secure and user-specific, supporting users in their efforts to maintain and monitor their heart rate data effectively."
					},
					"response": []
				},
				{
					"name": "get-yearly-heartrate-data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Success Response\");",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.value).to.eql(100);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}device/heart-rate/fixyear/2023",
							"host": [
								"{{url}}device"
							],
							"path": [
								"heart-rate",
								"fixyear",
								"2023"
							]
						},
						"description": "The \"Get Fixed-Year Heart Rate Data\" API empowers users to access heart rate data specifically for a fixed year identified by the `yearKey` parameter. This API provides the `access_token` in the header for user authentication.\n\n**Key Features:**\n\n- **Method:** GET\n    \n- **Endpoint:** `/device/heart-rate/fixyear/{yearKey}`\n    \n\n**Usage:**\n\n1. To retrieve heart rate data for a specific year, users can make a GET request to the endpoint `/device/heart-rate/fixyear/{yearKey}`.\n    \n2. Include the user's `access_token` in the \"Authorization\" header of the request, ensuring that the operation is secure and specific to the authenticated user.\n    \n3. Specify the `yearKey` parameter in the URL to indicate the target year for heart rate data retrieval. The API will retrieve heart rate data for the specified year.\n    \n4. The system retrieves and presents the heart rate data for the fixed year as indicated by the `yearKey`.\n    \n5. The API responds with the heart rate data for the selected year, allowing users to analyze and monitor their cardiovascular health within that specific time frame.\n    \n\nThe \"Get Fixed-Year Heart Rate Data\" API offers a focused view of heart rate information for a designated year, making it convenient for users to track their cardiovascular health throughout specific time periods. The `access_token` in the header ensures that the operation is secure and user-specific, supporting users in their efforts to maintain and monitor their heart rate data effectively."
					},
					"response": []
				}
			],
			"description": "The \"Heart Rate Module\" is an essential component within the system, facilitating the recording and retrieval of heart rate data. It consists of four APIs that enable users to save and access their heart rate information, categorized by frequency type (daily, monthly, and yearly).\n\n**Key Features:**\n\n1. **Save Heart Rate Data:**\n    \n    - **API Name:** Save Heart Rate Data\n        \n    - **Description:** This API allows users to record and store their heart rate data, including heart rate readings at specific time intervals. It provides a means for tracking and managing heart rate metrics.\n        \n2. **Get Daily Heart Rate Data:**\n    \n    - **API Name:** Get Daily Heart Rate Data\n        \n    - **Description:** Users can utilize this API to retrieve their heart rate data on a daily basis. It offers insights into their heart rate patterns and fluctuations within a single day.\n        \n3. **Get Monthly Heart Rate Data:**\n    \n    - **API Name:** Get Monthly Heart Rate Data\n        \n    - **Description:** This API enables users to access their heart rate data on a monthly basis. It provides an overview of heart rate trends over a calendar month.\n        \n4. **Get Yearly Heart Rate Data:**\n    \n    - **API Name:** Get Yearly Heart Rate Data\n        \n    - **Description:** Users can use this API to retrieve their heart rate data on a yearly basis. It offers a comprehensive view of heart rate patterns and changes throughout the year.\n        \n\nThe \"Heart Rate Module\" simplifies the process of heart rate tracking and analysis. These APIs empower users to record and access their heart rate data on various time scales, providing insights into their cardiovascular health. This functionality supports a health-conscious and informed user community within the system."
		},
		{
			"name": "blood pressure",
			"item": [
				{
					"name": "post-blood-pressure-data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Messsage\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Blood Pressure data saved successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data_arr\": [\n    {\n      \"readings\": [\n        { \"systolic\": 137, \"diastolic\": 98 },\n        { \"systolic\": 123, \"diastolic\": 83 },\n        { \"systolic\": 142, \"diastolic\": 101 },\n        { \"systolic\": 145, \"diastolic\": 102 },\n        { \"systolic\": 133, \"diastolic\": 91 },\n        { \"systolic\": 128, \"diastolic\": 84 },\n        { \"systolic\": 127, \"diastolic\": 97 },\n        { \"systolic\": 124, \"diastolic\": 85 },\n        { \"systolic\": 135, \"diastolic\": 104 },\n        { \"systolic\": 138, \"diastolic\": 87 },\n        { \"systolic\": 130, \"diastolic\": 98 },\n        { \"systolic\": 134, \"diastolic\": 96 },\n        { \"systolic\": 126, \"diastolic\": 92 },\n        { \"systolic\": 136, \"diastolic\": 97 },\n        { \"systolic\": 125, \"diastolic\": 99 },\n        { \"systolic\": 132, \"diastolic\": 82 },\n        { \"systolic\": 139, \"diastolic\": 95 },\n        { \"systolic\": 143, \"diastolic\": 93 },\n        { \"systolic\": 131, \"diastolic\": 103 },\n        { \"systolic\": 144, \"diastolic\": 100 },\n        { \"systolic\": 141, \"diastolic\": 105 },\n        { \"systolic\": 129, \"diastolic\": 100 },\n        { \"systolic\": 140, \"diastolic\": 101 },\n        { \"systolic\": 137, \"diastolic\": 105 },\n        { \"systolic\": 138, \"diastolic\": 95 },\n        { \"systolic\": 126, \"diastolic\": 90 },\n        { \"systolic\": 132, \"diastolic\": 80 },\n        { \"systolic\": 123, \"diastolic\": 83 },\n        { \"systolic\": 129, \"diastolic\": 97 },\n        { \"systolic\": 134, \"diastolic\": 88 },\n        { \"systolic\": 140, \"diastolic\": 92 }\n      ],\n      \"start_time\": 1674880862000,\n      \"interval_seconds\": 1800\n    },\n    {\n      \"readings\": [\n        { \"systolic\": 141, \"diastolic\": 99 },\n        { \"systolic\": 125, \"diastolic\": 100 },\n        { \"systolic\": 124, \"diastolic\": 95 },\n        { \"systolic\": 129, \"diastolic\": 86 },\n        { \"systolic\": 133, \"diastolic\": 84 },\n        { \"systolic\": 134, \"diastolic\": 101 },\n        { \"systolic\": 139, \"diastolic\": 88 },\n        { \"systolic\": 138, \"diastolic\": 81 },\n        { \"systolic\": 130, \"diastolic\": 90 },\n        { \"systolic\": 135, \"diastolic\": 86 },\n        { \"systolic\": 126, \"diastolic\": 92 },\n        { \"systolic\": 138, \"diastolic\": 93 },\n        { \"systolic\": 123, \"diastolic\": 91 },\n        { \"systolic\": 132, \"diastolic\": 95 },\n        { \"systolic\": 144, \"diastolic\": 104 },\n        { \"systolic\": 138, \"diastolic\": 103 },\n        { \"systolic\": 142, \"diastolic\": 80 },\n        { \"systolic\": 141, \"diastolic\": 97 },\n        { \"systolic\": 137, \"diastolic\": 85 },\n        { \"systolic\": 143, \"diastolic\": 89 },\n        { \"systolic\": 126, \"diastolic\": 85 },\n        { \"systolic\": 131, \"diastolic\": 87 },\n        { \"systolic\": 129, \"diastolic\": 83 },\n        { \"systolic\": 124, \"diastolic\": 96 },\n        { \"systolic\": 140, \"diastolic\": 87 },\n        { \"systolic\": 134, \"diastolic\": 84 },\n        { \"systolic\": 137, \"diastolic\": 88 },\n        { \"systolic\": 135, \"diastolic\": 92 },\n        { \"systolic\": 128, \"diastolic\": 80 },\n        { \"systolic\": 143, \"diastolic\": 82 },\n        { \"systolic\": 132, \"diastolic\": 87 }\n      ],\n      \"start_time\": 1677559262000,\n      \"interval_seconds\": 1800\n    },\n    {\n      \"readings\": [\n        { \"systolic\": 144, \"diastolic\": 84 },\n        { \"systolic\": 128, \"diastolic\": 84 },\n        { \"systolic\": 129, \"diastolic\": 94 },\n        { \"systolic\": 145, \"diastolic\": 82 },\n        { \"systolic\": 132, \"diastolic\": 103 },\n        { \"systolic\": 126, \"diastolic\": 86 },\n        { \"systolic\": 140, \"diastolic\": 96 },\n        { \"systolic\": 133, \"diastolic\": 87 },\n        { \"systolic\": 138, \"diastolic\": 82 },\n        { \"systolic\": 124, \"diastolic\": 84 },\n        { \"systolic\": 141, \"diastolic\": 101 },\n        { \"systolic\": 142, \"diastolic\": 96 },\n        { \"systolic\": 127, \"diastolic\": 81 },\n        { \"systolic\": 139, \"diastolic\": 101 },\n        { \"systolic\": 135, \"diastolic\": 85 },\n        { \"systolic\": 143, \"diastolic\": 94 },\n        { \"systolic\": 145, \"diastolic\": 91 },\n        { \"systolic\": 134, \"diastolic\": 96 },\n        { \"systolic\": 137, \"diastolic\": 99 },\n        { \"systolic\": 125, \"diastolic\": 87 },\n        { \"systolic\": 136, \"diastolic\": 101 },\n        { \"systolic\": 144, \"diastolic\": 101 },\n        { \"systolic\": 128, \"diastolic\": 84 },\n        { \"systolic\": 138, \"diastolic\": 85 },\n        { \"systolic\": 126, \"diastolic\": 83 },\n        { \"systolic\": 133, \"diastolic\": 102 },\n        { \"systolic\": 124, \"diastolic\": 96 },\n        { \"systolic\": 132, \"diastolic\": 92 },\n        { \"systolic\": 130, \"diastolic\": 82 },\n        { \"systolic\": 142, \"diastolic\": 80 },\n        { \"systolic\": 131, \"diastolic\": 89 }\n      ],\n      \"start_time\": 1679978462000,\n      \"interval_seconds\": 1800\n    },\n    {\n      \"readings\": [\n        { \"systolic\": 136, \"diastolic\": 90 },\n        { \"systolic\": 141, \"diastolic\": 99 },\n        { \"systolic\": 134, \"diastolic\": 92 },\n        { \"systolic\": 145, \"diastolic\": 96 },\n        { \"systolic\": 126, \"diastolic\": 82 },\n        { \"systolic\": 138, \"diastolic\": 85 },\n        { \"systolic\": 125, \"diastolic\": 88 },\n        { \"systolic\": 132, \"diastolic\": 80 },\n        { \"systolic\": 144, \"diastolic\": 87 },\n        { \"systolic\": 130, \"diastolic\": 84 },\n        { \"systolic\": 143, \"diastolic\": 94 },\n        { \"systolic\": 129, \"diastolic\": 98 },\n        { \"systolic\": 137, \"diastolic\": 92 },\n        { \"systolic\": 139, \"diastolic\": 93 },\n        { \"systolic\": 140, \"diastolic\": 86 },\n        { \"systolic\": 133, \"diastolic\": 82 },\n        { \"systolic\": 127, \"diastolic\": 99 },\n        { \"systolic\": 141, \"diastolic\": 91 },\n        { \"systolic\": 136, \"diastolic\": 105 },\n        { \"systolic\": 143, \"diastolic\": 80 },\n        { \"systolic\": 145, \"diastolic\": 85 },\n        { \"systolic\": 124, \"diastolic\": 95 },\n        { \"systolic\": 132, \"diastolic\": 82 },\n        { \"systolic\": 140, \"diastolic\": 91 },\n        { \"systolic\": 137, \"diastolic\": 83 },\n        { \"systolic\": 128, \"diastolic\": 81 },\n        { \"systolic\": 134, \"diastolic\": 101 },\n        { \"systolic\": 126, \"diastolic\": 92 },\n        { \"systolic\": 135, \"diastolic\": 97 },\n        { \"systolic\": 143, \"diastolic\": 85 },\n        { \"systolic\": 139, \"diastolic\": 89 },\n        { \"systolic\": 131, \"diastolic\": 95 }\n      ],\n      \"start_time\": 1682656862000,\n      \"interval_seconds\": 1800\n    },\n    {\n      \"readings\": [\n        { \"systolic\": 124, \"diastolic\": 101 },\n        { \"systolic\": 128, \"diastolic\": 92 },\n        { \"systolic\": 140, \"diastolic\": 96 },\n        { \"systolic\": 132, \"diastolic\": 95 },\n        { \"systolic\": 144, \"diastolic\": 90 },\n        { \"systolic\": 126, \"diastolic\": 92 },\n        { \"systolic\": 139, \"diastolic\": 91 },\n        { \"systolic\": 138, \"diastolic\": 90 },\n        { \"systolic\": 145, \"diastolic\": 88 },\n        { \"systolic\": 135, \"diastolic\": 84 },\n        { \"systolic\": 143, \"diastolic\": 81 },\n        { \"systolic\": 133, \"diastolic\": 88 },\n        { \"systolic\": 125, \"diastolic\": 96 },\n        { \"systolic\": 142, \"diastolic\": 103 },\n        { \"systolic\": 137, \"diastolic\": 82 },\n        { \"systolic\": 141, \"diastolic\": 99 },\n        { \"systolic\": 136, \"diastolic\": 84 },\n        { \"systolic\": 131, \"diastolic\": 102 },\n        { \"systolic\": 134, \"diastolic\": 99 },\n        { \"systolic\": 129, \"diastolic\": 90 },\n        { \"systolic\": 127, \"diastolic\": 87 },\n        { \"systolic\": 144, \"diastolic\": 82 },\n        { \"systolic\": 130, \"diastolic\": 84 },\n        { \"systolic\": 140, \"diastolic\": 93 },\n        { \"systolic\": 143, \"diastolic\": 88 },\n        { \"systolic\": 137, \"diastolic\": 101 },\n        { \"systolic\": 141, \"diastolic\": 87 },\n        { \"systolic\": 142, \"diastolic\": 84 },\n        { \"systolic\": 138, \"diastolic\": 88 },\n        { \"systolic\": 126, \"diastolic\": 90 },\n        { \"systolic\": 145, \"diastolic\": 83 },\n        { \"systolic\": 136, \"diastolic\": 103 }\n      ],\n      \"start_time\": 1685248862000,\n      \"interval_seconds\": 1800\n    },\n    {\n      \"readings\": [\n        { \"systolic\": 143, \"diastolic\": 86 },\n        { \"systolic\": 140, \"diastolic\": 82 },\n        { \"systolic\": 134, \"diastolic\": 83 },\n        { \"systolic\": 136, \"diastolic\": 91 },\n        { \"systolic\": 141, \"diastolic\": 88 },\n        { \"systolic\": 127, \"diastolic\": 99 },\n        { \"systolic\": 135, \"diastolic\": 95 },\n        { \"systolic\": 129, \"diastolic\": 85 },\n        { \"systolic\": 133, \"diastolic\": 91 },\n        { \"systolic\": 126, \"diastolic\": 88 },\n        { \"systolic\": 138, \"diastolic\": 92 },\n        { \"systolic\": 145, \"diastolic\": 101 },\n        { \"systolic\": 137, \"diastolic\": 96 },\n        { \"systolic\": 128, \"diastolic\": 92 },\n        { \"systolic\": 144, \"diastolic\": 103 },\n        { \"systolic\": 142, \"diastolic\": 98 },\n        { \"systolic\": 143, \"diastolic\": 91 },\n        { \"systolic\": 139, \"diastolic\": 88 },\n        { \"systolic\": 140, \"diastolic\": 92 },\n        { \"systolic\": 131, \"diastolic\": 100 },\n        { \"systolic\": 132, \"diastolic\": 85 },\n        { \"systolic\": 125, \"diastolic\": 87 },\n        { \"systolic\": 135, \"diastolic\": 92 },\n        { \"systolic\": 144, \"diastolic\": 86 },\n        { \"systolic\": 126, \"diastolic\": 87 },\n        { \"systolic\": 129, \"diastolic\": 90 },\n        { \"systolic\": 131, \"diastolic\": 102 },\n        { \"systolic\": 143, \"diastolic\": 85 },\n        { \"systolic\": 140, \"diastolic\": 90 },\n        { \"systolic\": 128, \"diastolic\": 95 },\n        { \"systolic\": 139, \"diastolic\": 96 },\n        { \"systolic\": 141, \"diastolic\": 98 }\n      ],\n      \"start_time\": 1687927262000,\n      \"interval_seconds\": 1800\n    },\n    {\n      \"readings\": [\n        { \"systolic\": 134, \"diastolic\": 84 },\n        { \"systolic\": 136, \"diastolic\": 89 },\n        { \"systolic\": 143, \"diastolic\": 83 },\n        { \"systolic\": 144, \"diastolic\": 97 },\n        { \"systolic\": 141, \"diastolic\": 84 },\n        { \"systolic\": 130, \"diastolic\": 95 },\n        { \"systolic\": 126, \"diastolic\": 93 },\n        { \"systolic\": 145, \"diastolic\": 85 },\n        { \"systolic\": 128, \"diastolic\": 93 },\n        { \"systolic\": 140, \"diastolic\": 101 },\n        { \"systolic\": 142, \"diastolic\": 86 },\n        { \"systolic\": 132, \"diastolic\": 92 },\n        { \"systolic\": 133, \"diastolic\": 85 },\n        { \"systolic\": 137, \"diastolic\": 93 },\n        { \"systolic\": 131, \"diastolic\": 87 },\n        { \"systolic\": 125, \"diastolic\": 96 },\n        { \"systolic\": 135, \"diastolic\": 89 },\n        { \"systolic\": 129, \"diastolic\": 82 },\n        { \"systolic\": 144, \"diastolic\": 93 },\n        { \"systolic\": 140, \"diastolic\": 96 },\n        { \"systolic\": 126, \"diastolic\": 85 },\n        { \"systolic\": 135, \"diastolic\": 93 },\n        { \"systolic\": 137, \"diastolic\": 85 },\n        { \"systolic\": 129, \"diastolic\": 83 },\n        { \"systolic\": 130, \"diastolic\": 87 },\n        { \"systolic\": 139, \"diastolic\": 95 },\n        { \"systolic\": 132, \"diastolic\": 92 },\n        { \"systolic\": 131, \"diastolic\": 85 },\n        { \"systolic\": 138, \"diastolic\": 99 },\n        { \"systolic\": 133, \"diastolic\": 98 },\n        { \"systolic\": 143, \"diastolic\": 97 }\n      ],\n      \"start_time\": 1690519262000,\n      \"interval_seconds\": 1800\n    },\n    {\n      \"readings\": [\n        { \"systolic\": 136, \"diastolic\": 103 },\n        { \"systolic\": 141, \"diastolic\": 96 },\n        { \"systolic\": 128, \"diastolic\": 92 },\n        { \"systolic\": 140, \"diastolic\": 85 },\n        { \"systolic\": 137, \"diastolic\": 89 },\n        { \"systolic\": 143, \"diastolic\": 88 },\n        { \"systolic\": 130, \"diastolic\": 91 },\n        { \"systolic\": 144, \"diastolic\": 96 },\n        { \"systolic\": 134, \"diastolic\": 85 },\n        { \"systolic\": 125, \"diastolic\": 88 },\n        { \"systolic\": 126, \"diastolic\": 94 },\n        { \"systolic\": 129, \"diastolic\": 91 },\n        { \"systolic\": 135, \"diastolic\": 93 },\n        { \"systolic\": 142, \"diastolic\": 88 },\n        { \"systolic\": 138, \"diastolic\": 91 },\n        { \"systolic\": 143, \"diastolic\": 85 },\n        { \"systolic\": 131, \"diastolic\": 95 },\n        { \"systolic\": 139, \"diastolic\": 95 },\n        { \"systolic\": 132, \"diastolic\": 82 },\n        { \"systolic\": 136, \"diastolic\": 87 },\n        { \"systolic\": 137, \"diastolic\": 92 },\n        { \"systolic\": 140, \"diastolic\": 92 },\n        { \"systolic\": 141, \"diastolic\": 90 },\n        { \"systolic\": 134, \"diastolic\": 97 },\n        { \"systolic\": 138, \"diastolic\": 85 },\n        { \"systolic\": 130, \"diastolic\": 85 },\n        { \"systolic\": 145, \"diastolic\": 90 },\n        { \"systolic\": 129, \"diastolic\": 87 },\n        { \"systolic\": 144, \"diastolic\": 92 },\n        { \"systolic\": 133, \"diastolic\": 92 },\n        { \"systolic\": 142, \"diastolic\": 82 },\n        { \"systolic\": 127, \"diastolic\": 100 },\n        { \"systolic\": 131, \"diastolic\": 87 }\n      ],\n      \"start_time\": 1693197662000,\n      \"interval_seconds\": 1800\n    },\n    {\n      \"readings\": [\n        { \"systolic\": 137, \"diastolic\": 98 },\n        { \"systolic\": 123, \"diastolic\": 83 },\n        { \"systolic\": 142, \"diastolic\": 101 },\n        { \"systolic\": 145, \"diastolic\": 102 },\n        { \"systolic\": 133, \"diastolic\": 91 },\n        { \"systolic\": 128, \"diastolic\": 84 },\n        { \"systolic\": 127, \"diastolic\": 97 },\n        { \"systolic\": 124, \"diastolic\": 85 },\n        { \"systolic\": 135, \"diastolic\": 104 },\n        { \"systolic\": 138, \"diastolic\": 87 },\n        { \"systolic\": 130, \"diastolic\": 98 },\n        { \"systolic\": 134, \"diastolic\": 96 },\n        { \"systolic\": 126, \"diastolic\": 92 },\n        { \"systolic\": 136, \"diastolic\": 97 },\n        { \"systolic\": 125, \"diastolic\": 99 },\n        { \"systolic\": 132, \"diastolic\": 82 },\n        { \"systolic\": 139, \"diastolic\": 95 },\n        { \"systolic\": 143, \"diastolic\": 93 },\n        { \"systolic\": 131, \"diastolic\": 103 },\n        { \"systolic\": 144, \"diastolic\": 100 },\n        { \"systolic\": 141, \"diastolic\": 105 },\n        { \"systolic\": 129, \"diastolic\": 100 },\n        { \"systolic\": 140, \"diastolic\": 101 },\n        { \"systolic\": 137, \"diastolic\": 105 },\n        { \"systolic\": 138, \"diastolic\": 95 },\n        { \"systolic\": 126, \"diastolic\": 90 },\n        { \"systolic\": 132, \"diastolic\": 80 },\n        { \"systolic\": 123, \"diastolic\": 83 },\n        { \"systolic\": 129, \"diastolic\": 97 },\n        { \"systolic\": 134, \"diastolic\": 88 },\n        { \"systolic\": 140, \"diastolic\": 92 }\n      ],\n      \"start_time\": 1695876062000,\n      \"interval_seconds\": 1800\n    },\n    {\n      \"readings\": [\n        { \"systolic\": 141, \"diastolic\": 99 },\n        { \"systolic\": 125, \"diastolic\": 100 },\n        { \"systolic\": 124, \"diastolic\": 95 },\n        { \"systolic\": 129, \"diastolic\": 86 },\n        { \"systolic\": 133, \"diastolic\": 84 },\n        { \"systolic\": 134, \"diastolic\": 101 },\n        { \"systolic\": 139, \"diastolic\": 88 },\n        { \"systolic\": 138, \"diastolic\": 81 },\n        { \"systolic\": 130, \"diastolic\": 90 },\n        { \"systolic\": 135, \"diastolic\": 86 },\n        { \"systolic\": 126, \"diastolic\": 92 },\n        { \"systolic\": 138, \"diastolic\": 93 },\n        { \"systolic\": 123, \"diastolic\": 91 },\n        { \"systolic\": 132, \"diastolic\": 95 },\n        { \"systolic\": 144, \"diastolic\": 104 },\n        { \"systolic\": 138, \"diastolic\": 103 },\n        { \"systolic\": 142, \"diastolic\": 80 },\n        { \"systolic\": 141, \"diastolic\": 97 },\n        { \"systolic\": 137, \"diastolic\": 85 },\n        { \"systolic\": 143, \"diastolic\": 89 },\n        { \"systolic\": 126, \"diastolic\": 85 },\n        { \"systolic\": 131, \"diastolic\": 87 },\n        { \"systolic\": 129, \"diastolic\": 83 },\n        { \"systolic\": 124, \"diastolic\": 96 },\n        { \"systolic\": 140, \"diastolic\": 87 },\n        { \"systolic\": 134, \"diastolic\": 84 },\n        { \"systolic\": 137, \"diastolic\": 88 },\n        { \"systolic\": 135, \"diastolic\": 92 },\n        { \"systolic\": 128, \"diastolic\": 80 },\n        { \"systolic\": 143, \"diastolic\": 82 },\n        { \"systolic\": 132, \"diastolic\": 87 }\n      ],\n      \"start_time\": 1698468062000,\n      \"interval_seconds\": 1800\n    },\n    {\n      \"readings\": [\n        { \"systolic\": 144, \"diastolic\": 84 },\n        { \"systolic\": 128, \"diastolic\": 84 },\n        { \"systolic\": 129, \"diastolic\": 94 },\n        { \"systolic\": 145, \"diastolic\": 82 },\n        { \"systolic\": 132, \"diastolic\": 103 },\n        { \"systolic\": 126, \"diastolic\": 86 },\n        { \"systolic\": 140, \"diastolic\": 96 },\n        { \"systolic\": 133, \"diastolic\": 87 },\n        { \"systolic\": 138, \"diastolic\": 82 },\n        { \"systolic\": 124, \"diastolic\": 84 },\n        { \"systolic\": 141, \"diastolic\": 101 },\n        { \"systolic\": 142, \"diastolic\": 96 },\n        { \"systolic\": 127, \"diastolic\": 81 },\n        { \"systolic\": 139, \"diastolic\": 101 },\n        { \"systolic\": 135, \"diastolic\": 85 },\n        { \"systolic\": 143, \"diastolic\": 94 },\n        { \"systolic\": 145, \"diastolic\": 91 },\n        { \"systolic\": 134, \"diastolic\": 96 },\n        { \"systolic\": 137, \"diastolic\": 99 },\n        { \"systolic\": 125, \"diastolic\": 87 },\n        { \"systolic\": 136, \"diastolic\": 101 },\n        { \"systolic\": 144, \"diastolic\": 101 },\n        { \"systolic\": 128, \"diastolic\": 84 },\n        { \"systolic\": 138, \"diastolic\": 85 },\n        { \"systolic\": 126, \"diastolic\": 83 },\n        { \"systolic\": 133, \"diastolic\": 102 },\n        { \"systolic\": 124, \"diastolic\": 96 },\n        { \"systolic\": 132, \"diastolic\": 92 },\n        { \"systolic\": 130, \"diastolic\": 82 },\n        { \"systolic\": 142, \"diastolic\": 80 },\n        { \"systolic\": 131, \"diastolic\": 89 }\n      ],\n      \"start_time\": 1701146462000,\n      \"interval_seconds\": 1800\n    },\n    {\n      \"readings\": [\n        { \"systolic\": 136, \"diastolic\": 90 },\n        { \"systolic\": 141, \"diastolic\": 99 },\n        { \"systolic\": 134, \"diastolic\": 92 },\n        { \"systolic\": 145, \"diastolic\": 96 },\n        { \"systolic\": 126, \"diastolic\": 82 },\n        { \"systolic\": 138, \"diastolic\": 85 },\n        { \"systolic\": 125, \"diastolic\": 88 },\n        { \"systolic\": 132, \"diastolic\": 80 },\n        { \"systolic\": 144, \"diastolic\": 87 },\n        { \"systolic\": 130, \"diastolic\": 84 },\n        { \"systolic\": 143, \"diastolic\": 94 },\n        { \"systolic\": 129, \"diastolic\": 98 },\n        { \"systolic\": 137, \"diastolic\": 92 },\n        { \"systolic\": 139, \"diastolic\": 93 },\n        { \"systolic\": 140, \"diastolic\": 86 },\n        { \"systolic\": 133, \"diastolic\": 82 },\n        { \"systolic\": 127, \"diastolic\": 99 },\n        { \"systolic\": 141, \"diastolic\": 91 },\n        { \"systolic\": 136, \"diastolic\": 105 },\n        { \"systolic\": 143, \"diastolic\": 80 },\n        { \"systolic\": 145, \"diastolic\": 85 },\n        { \"systolic\": 124, \"diastolic\": 95 },\n        { \"systolic\": 132, \"diastolic\": 82 },\n        { \"systolic\": 140, \"diastolic\": 91 },\n        { \"systolic\": 137, \"diastolic\": 83 },\n        { \"systolic\": 128, \"diastolic\": 81 },\n        { \"systolic\": 134, \"diastolic\": 101 },\n        { \"systolic\": 126, \"diastolic\": 92 },\n        { \"systolic\": 135, \"diastolic\": 97 },\n        { \"systolic\": 143, \"diastolic\": 85 },\n        { \"systolic\": 139, \"diastolic\": 89 },\n        { \"systolic\": 131, \"diastolic\": 95 }\n      ],\n      \"start_time\": 1703738462000,\n      \"interval_seconds\": 1800\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}device/post-blood-pressure-data",
							"host": [
								"{{url}}device"
							],
							"path": [
								"post-blood-pressure-data"
							]
						},
						"description": "The \"Save Blood Pressure Data\" API empowers users to document and preserve their blood pressure data within the system, enabling the tracking and management of cardiovascular health.\n\n**Key Features:**\n\n- **Method:** POST\n- **Endpoint:** `/post-blood-pressure-data`\n    \n\n**Usage:**\n\n1. To record blood pressure data, users can make a POST request to the `/post-blood-pressure-data` endpoint.\n2. Include the user's `access_token` in the \"Authorization\" header of the request, ensuring the operation is secure and specific to the authenticated user.\n3. In the request body, provide a JSON object that includes the blood pressure data. This object can contain attributes such as:\n    - `timestamp`: The date and time of the blood pressure reading.\n    - `systolic_pressure`: The recorded systolic pressure reading.\n    - `diastolic_pressure`: The recorded diastolic pressure reading.\n    - Additional relevant data as needed.\n4. The system records and stores the provided blood pressure data, allowing users to track their cardiovascular health over time.\n5. Upon successful execution of the API, the system confirms the recording of blood pressure data, making it available for users to review and analyze their cardiovascular health.\n    \n\nThe \"Save Blood Pressure Data\" API supports users in maintaining and monitoring their cardiovascular health. By including the `access_token` in the header and providing a JSON object in the request body, users can efficiently record their blood pressure data, ultimately aiding in their health and wellness journey."
					},
					"response": []
				},
				{
					"name": "get-blood-pressure-data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Success Response\");",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.value).to.eql(100);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}device/blood-pressure/day/1706762462000/1709095262000",
							"host": [
								"{{url}}device"
							],
							"path": [
								"blood-pressure",
								"day",
								"1706762462000",
								"1709095262000"
							]
						},
						"description": "The \"Get Daily Blood Pressure Data\" API offers users the ability to access and review their recorded blood pressure data on a daily basis, within a defined date range from `fromDate` to `toDate`.\n\n**Key Features:**\n\n- **Method:** GET\n    \n- **Endpoint:** `/device/blood-pressure/day/{fromDate}/{toDate}`\n    \n\n**Usage:**\n\n1. To retrieve daily blood pressure data, users can make a GET request to the endpoint `/device/blood-pressure/day/{fromDate}/{toDate}`.\n    \n2. Include the user's `access_token` in the \"Authorization\" header of the request, ensuring that the operation is secure and specific to the authenticated user.\n    \n3. Specify the `fromDate` and `toDate` parameters in the URL to set the date range for the data retrieval. The API will retrieve blood pressure data within this specified time frame.\n    \n4. The system retrieves and presents the daily blood pressure data within the defined date range, including systolic and diastolic readings.\n    \n5. The API responds with the daily blood pressure data, allowing users to analyze and monitor their cardiovascular health on a daily basis.\n    \n\nThe \"Get Daily Blood Pressure Data\" API provides users with detailed insights into their cardiovascular health on a daily basis. The `access_token` in the header ensures that the operation is secure and limited to the authenticated user's data. This functionality supports users in maintaining and monitoring their blood pressure effectively, especially on a daily basis."
					},
					"response": []
				},
				{
					"name": "get-monthly-blood-pressure-data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Success Response\");",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.value).to.eql(100);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}device/blood-pressure/fixmonth/2023-05",
							"host": [
								"{{url}}device"
							],
							"path": [
								"blood-pressure",
								"fixmonth",
								"2023-05"
							]
						},
						"description": "The \"Get Fixed-Month Blood Pressure Data\" API enables users to access their recorded blood pressure data for a fixed month specified by the `monthKey` parameter.\n\n**Key Features:**\n\n- **Method:** GET\n    \n- **Endpoint:** `/device/blood-pressure/fixmonth/{monthKey}`\n    \n\n**Usage:**\n\n1. To retrieve blood pressure data for a specific month, users can make a GET request to the endpoint `/device/blood-pressure/fixmonth/{monthKey}`.\n    \n2. Include the user's `access_token` in the \"Authorization\" header of the request, ensuring that the operation is secure and specific to the authenticated user.\n    \n3. Specify the `monthKey` parameter in the URL to indicate the target month for blood pressure data retrieval. The API will retrieve blood pressure data for the specified month.\n    \n4. The system retrieves and presents the blood pressure data for the fixed month as indicated by the `monthKey`.\n    \n5. The API responds with the blood pressure data for the selected month, allowing users to analyze and monitor their cardiovascular health within that specific time frame.\n    \n\nThe \"Get Fixed-Month Blood Pressure Data\" API offers a focused view of blood pressure information for a designated month. The `access_token` in the header ensures that the operation is secure and user-specific, supporting users in their efforts to maintain and monitor their blood pressure data effectively during the selected month."
					},
					"response": []
				},
				{
					"name": "get-yearly-blood-pressure-data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Success Response\");",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.value).to.eql(100);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}device/blood-pressure/fixyear/2023",
							"host": [
								"{{url}}device"
							],
							"path": [
								"blood-pressure",
								"fixyear",
								"2023"
							]
						},
						"description": "The \"Get Fixed-Year Blood Pressure Data\" API empowers users to access their recorded blood pressure data for a fixed year identified by the `yearKey` parameter.\n\n**Key Features:**\n\n- **Method:** GET\n    \n- **Endpoint:** `/device/blood-pressure/fixyear/{yearKey}`\n    \n\n**Usage:**\n\n1. To retrieve blood pressure data for a specific year, users can make a GET request to the endpoint `/device/blood-pressure/fixyear/{yearKey}`.\n    \n2. Include the user's `access_token` in the \"Authorization\" header of the request, ensuring that the operation is secure and specific to the authenticated user.\n    \n3. Specify the `yearKey` parameter in the URL to indicate the target year for blood pressure data retrieval. The API will retrieve blood pressure data for the specified year.\n    \n4. The system retrieves and presents the blood pressure data for the fixed year as indicated by the `yearKey`.\n    \n5. The API responds with the blood pressure data for the selected year, allowing users to analyze and monitor their cardiovascular health within that specific time frame.\n    \n\nThe \"Get Fixed-Year Blood Pressure Data\" API provides a focused view of blood pressure information for a designated year. The `access_token` in the header ensures that the operation is secure and user-specific, supporting users in their efforts to maintain and monitor their blood pressure data effectively throughout the chosen year."
					},
					"response": []
				}
			],
			"description": "The \"Blood Pressure Module\" is an essential component within the system, facilitating the recording and retrieval of blood pressure data. It consists of four APIs that enable users to save and access their blood pressure information, categorized by frequency type (daily, monthly, and yearly).\n\n**Key Features:**\n\n1. **Save Blood Pressure Data:**\n    \n    - **API Name:** Save Blood Pressure Data\n        \n    - **Description:** This API allows users to record and store their blood pressure data, including systolic and diastolic readings at specific time intervals. It provides a means for tracking and managing blood pressure metrics.\n        \n2. **Get Daily Blood Pressure Data:**\n    \n    - **API Name:** Get Daily Blood Pressure Data\n        \n    - **Description:** Users can utilize this API to retrieve their blood pressure data on a daily basis. It offers insights into their blood pressure patterns and fluctuations within a single day.\n        \n3. **Get Monthly Blood Pressure Data:**\n    \n    - **API Name:** Get Monthly Blood Pressure Data\n        \n    - **Description:** This API enables users to access their blood pressure data on a monthly basis. It provides an overview of blood pressure trends over a calendar month.\n        \n4. **Get Yearly Blood Pressure Data:**\n    \n    - **API Name:** Get Yearly Blood Pressure Data\n        \n    - **Description:** Users can use this API to retrieve their blood pressure data on a yearly basis. It offers a comprehensive view of blood pressure patterns and changes throughout the year.\n        \n\nThe \"Blood Pressure Module\" simplifies the process of blood pressure tracking and analysis, promoting cardiovascular health and wellness. These APIs empower users to record and access their blood pressure data on various time scales, providing insights into their health and helping them make informed decisions about their well-being."
		},
		{
			"name": "sleep",
			"item": [
				{
					"name": "post-sleep",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Messsage\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Heart rate data saved successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data_arr\": [\n    {\n      \"totalTime\": 419,\n      \"restfulTime\": 134,\n      \"lightTime\": 57,\n      \"soberTime\": 72,\n      \"remTime\": 156,\n      \"details\": [\n        {\n          \"startTime\": 1698867200000,\n          \"endTime\": 1698900000000,\n          \"totalTime\": 9,\n          \"type\": 1\n        },\n        {\n          \"startTime\": 1698910800000,\n          \"endTime\": 1698943600000,\n          \"totalTime\": 9,\n          \"type\": 2\n        }\n      ],\n      \"datetime\": 1698892800000\n    },\n    {\n      \"totalTime\": 414,\n      \"restfulTime\": 92,\n      \"lightTime\": 103,\n      \"soberTime\": 104,\n      \"remTime\": 115,\n      \"details\": [\n        {\n          \"startTime\": 1698979200000,\n          \"endTime\": 1699012000000,\n          \"totalTime\": 10,\n          \"type\": 0\n        }\n      ],\n      \"datetime\": 1698979200000\n    },\n    {\n      \"totalTime\": 413,\n      \"restfulTime\": 78,\n      \"lightTime\": 134,\n      \"soberTime\": 70,\n      \"remTime\": 131,\n      \"details\": [\n        {\n          \"startTime\": 1699065600000,\n          \"endTime\": 1699098400000,\n          \"totalTime\": 11,\n          \"type\": 2\n        }\n      ],\n      \"datetime\": 1699065600000\n    },\n    {\n      \"totalTime\": 365,\n      \"restfulTime\": 100,\n      \"lightTime\": 82,\n      \"soberTime\": 95,\n      \"remTime\": 88,\n      \"details\": [\n        {\n          \"startTime\": 1699152000000,\n          \"endTime\": 1699184800000,\n          \"totalTime\": 12,\n          \"type\": 3\n        }\n      ],\n      \"datetime\": 1699152000000\n    },\n    {\n      \"totalTime\": 461,\n      \"restfulTime\": 131,\n      \"lightTime\": 81,\n      \"soberTime\": 126,\n      \"remTime\": 123,\n      \"details\": [\n        {\n          \"startTime\": 1699238400000,\n          \"endTime\": 1699271200000,\n          \"totalTime\": 13,\n          \"type\": 0\n        }\n      ],\n      \"datetime\": 1699238400000\n    },\n    {\n      \"totalTime\": 415,\n      \"restfulTime\": 86,\n      \"lightTime\": 139,\n      \"soberTime\": 69,\n      \"remTime\": 121,\n      \"details\": [\n        {\n          \"startTime\": 1699324800000,\n          \"endTime\": 1699357600000,\n          \"totalTime\": 14,\n          \"type\": 1\n        }\n      ],\n      \"datetime\": 1699324800000\n    },\n    {\n      \"totalTime\": 474,\n      \"restfulTime\": 115,\n      \"lightTime\": 145,\n      \"soberTime\": 62,\n      \"remTime\": 152,\n      \"details\": [\n        {\n          \"startTime\": 1699411200000,\n          \"endTime\": 1699444000000,\n          \"totalTime\": 15,\n          \"type\": 3\n        }\n      ],\n      \"datetime\": 1699411200000\n    },\n    {\n      \"totalTime\": 368,\n      \"restfulTime\": 99,\n      \"lightTime\": 62,\n      \"soberTime\": 76,\n      \"remTime\": 131,\n      \"details\": [\n        {\n          \"startTime\": 1699497600000,\n          \"endTime\": 1699530400000,\n          \"totalTime\": 16,\n          \"type\": 2\n        }\n      ],\n      \"datetime\": 1699497600000\n    },\n    {\n      \"totalTime\": 373,\n      \"restfulTime\": 105,\n      \"lightTime\": 73,\n      \"soberTime\": 90,\n      \"remTime\": 105,\n      \"details\": [\n        {\n          \"startTime\": 1699584000000,\n          \"endTime\": 1699616800000,\n          \"totalTime\": 17,\n          \"type\": 0\n        }\n      ],\n      \"datetime\": 1699584000000\n    },\n    {\n      \"totalTime\": 443,\n      \"restfulTime\": 120,\n      \"lightTime\": 83,\n      \"soberTime\": 128,\n      \"remTime\": 112,\n      \"details\": [\n        {\n          \"startTime\": 1699670400000,\n          \"endTime\": 1699703200000,\n          \"totalTime\": 18,\n          \"type\": 2\n        }\n      ],\n      \"datetime\": 1699670400000\n    },\n    {\n      \"totalTime\": 471,\n      \"restfulTime\": 125,\n      \"lightTime\": 82,\n      \"soberTime\": 111,\n      \"remTime\": 153,\n      \"details\": [\n        {\n          \"startTime\": 1699756800000,\n          \"endTime\": 1699789600000,\n          \"totalTime\": 19,\n          \"type\": 3\n        }\n      ],\n      \"datetime\": 1699756800000\n    },\n    {\n      \"totalTime\": 424,\n      \"restfulTime\": 87,\n      \"lightTime\": 80,\n      \"soberTime\": 134,\n      \"remTime\": 123,\n      \"details\": [\n        {\n          \"startTime\": 1699843200000,\n          \"endTime\": 1699876000000,\n          \"totalTime\": 20,\n          \"type\": 1\n        }\n      ],\n      \"datetime\": 1699843200000\n    },\n    {\n      \"totalTime\": 477,\n      \"restfulTime\": 134,\n      \"lightTime\": 90,\n      \"soberTime\": 80,\n      \"remTime\": 173,\n      \"details\": [\n        {\n          \"startTime\": 1699929600000,\n          \"endTime\": 1699962400000,\n          \"totalTime\": 21,\n          \"type\": 0\n        }\n      ],\n      \"datetime\": 1699929600000\n    },\n    {\n      \"totalTime\": 452,\n      \"restfulTime\": 91,\n      \"lightTime\": 138,\n      \"soberTime\": 85,\n      \"remTime\": 138,\n      \"details\": [\n        {\n          \"startTime\": 1700016000000,\n          \"endTime\": 1700048800000,\n          \"totalTime\": 22,\n          \"type\": 1\n        }\n      ],\n      \"datetime\": 1700016000000\n    },\n    {\n      \"totalTime\": 453,\n      \"restfulTime\": 113,\n      \"lightTime\": 76,\n      \"soberTime\": 76,\n      \"remTime\": 188,\n      \"details\": [\n        {\n          \"startTime\": 1700102400000,\n          \"endTime\": 1700135200000,\n          \"totalTime\": 23,\n          \"type\": 3\n        }\n      ],\n      \"datetime\": 1700102400000\n    },\n    {\n      \"totalTime\": 433,\n      \"restfulTime\": 100,\n      \"lightTime\": 98,\n      \"soberTime\": 95,\n      \"remTime\": 140,\n      \"details\": [\n        {\n          \"startTime\": 1700188800000,\n          \"endTime\": 1700221600000,\n          \"totalTime\": 24,\n          \"type\": 2\n        }\n      ],\n      \"datetime\": 1700188800000\n    },\n    {\n      \"totalTime\": 366,\n      \"restfulTime\": 113,\n      \"lightTime\": 104,\n      \"soberTime\": 59,\n      \"remTime\": 90,\n      \"details\": [\n        {\n          \"startTime\": 1700275200000,\n          \"endTime\": 1700308000000,\n          \"totalTime\": 25,\n          \"type\": 0\n        }\n      ],\n      \"datetime\": 1700275200000\n    },\n    {\n      \"totalTime\": 468,\n      \"restfulTime\": 69,\n      \"lightTime\": 127,\n      \"soberTime\": 80,\n      \"remTime\": 192,\n      \"details\": [\n        {\n          \"startTime\": 1700361600000,\n          \"endTime\": 1700394400000,\n          \"totalTime\": 26,\n          \"type\": 1\n        }\n      ],\n      \"datetime\": 1700361600000\n    },\n    {\n      \"totalTime\": 446,\n      \"restfulTime\": 60,\n      \"lightTime\": 145,\n      \"soberTime\": 79,\n      \"remTime\": 162,\n      \"details\": [\n        {\n          \"startTime\": 1700448000000,\n          \"endTime\": 1700480800000,\n          \"totalTime\": 27,\n          \"type\": 2\n        }\n      ],\n      \"datetime\": 1700448000000\n    },\n    {\n      \"totalTime\": 452,\n      \"restfulTime\": 84,\n      \"lightTime\": 121,\n      \"soberTime\": 71,\n      \"remTime\": 176,\n      \"details\": [\n        {\n          \"startTime\": 1700534400000,\n          \"endTime\": 1700567200000,\n          \"totalTime\": 28,\n          \"type\": 3\n        }\n      ],\n      \"datetime\": 1700534400000\n    },\n    {\n      \"totalTime\": 367,\n      \"restfulTime\": 141,\n      \"lightTime\": 65,\n      \"soberTime\": 70,\n      \"remTime\": 91,\n      \"details\": [\n        {\n          \"startTime\": 1700620800000,\n          \"endTime\": 1700653600000,\n          \"totalTime\": 29,\n          \"type\": 0\n        }\n      ],\n      \"datetime\": 1700620800000\n    },\n    {\n      \"totalTime\": 382,\n      \"restfulTime\": 145,\n      \"lightTime\": 66,\n      \"soberTime\": 71,\n      \"remTime\": 100,\n      \"details\": [\n        {\n          \"startTime\": 1700707200000,\n          \"endTime\": 1700740000000,\n          \"totalTime\": 30,\n          \"type\": 1\n        }\n      ],\n      \"datetime\": 1700707200000\n    },\n    {\n      \"totalTime\": 377,\n      \"restfulTime\": 80,\n      \"lightTime\": 142,\n      \"soberTime\": 69,\n      \"remTime\": 86,\n      \"details\": [\n        {\n          \"startTime\": 1700793600000,\n          \"endTime\": 1700826400000,\n          \"totalTime\": 31,\n          \"type\": 2\n        }\n      ],\n      \"datetime\": 1700793600000\n    }\n  ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}device/post-sleep",
							"host": [
								"{{url}}device"
							],
							"path": [
								"post-sleep"
							]
						},
						"description": "The \"Save Sleep Data\" API empowers users to document and preserve their sleep-related information within the system, enabling the tracking and management of sleep patterns and quality.\n\n**Key Features:**\n\n- **Method:** POST\n    \n- **Endpoint:** `/post-sleep`\n    \n\n**Usage:**\n\n1. To record sleep data, users can make a POST request to the `/post-sleep` endpoint within the Sleep Module.\n    \n2. Include the user's `access_token` in the \"Authorization\" header of the request to ensure that the operation is secure and specific to the authenticated user.\n    \n3. In the request body, provide a JSON object that includes sleep-related metrics and details. This object may include attributes such as:\n    \n    - `timestamp`: The date and time of the sleep record.\n        \n    - `duration`: The total duration of the sleep session.\n        \n    - Additional relevant data as needed.\n        \n4. The system records and stores the provided sleep data, allowing users to track and monitor their sleep patterns and quality over time.\n    \n5. Upon successful execution of the API, the system confirms the recording of sleep data, making it available for users to review and analyze their sleep patterns and quality.\n    \n\nThe \"Save Sleep Data\" API supports users in tracking their sleep patterns and quality. By including the `access_token` in the header and providing a JSON object in the request body, users can efficiently record their sleep data, ultimately aiding in their efforts to improve their sleep quality and overall well-being."
					},
					"response": []
				},
				{
					"name": "get-sleep-data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Success Response\");",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.value).to.eql(100);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}device/sleep/day/1698813662000/1701319262000",
							"host": [
								"{{url}}device"
							],
							"path": [
								"sleep",
								"day",
								"1698813662000",
								"1701319262000"
							]
						},
						"description": "The \"Get Daily Sleep Data\" API offers users the ability to access and review their recorded sleep data on a daily basis, within a defined date range from `fromDate` to `toDate`.\n\n**Key Features:**\n\n- **Method:** GET\n    \n- **Endpoint:** `/device/sleep/day/{fromDate}/{toDate}`\n    \n\n**Usage:**\n\n1. To retrieve daily sleep data, users can make a GET request to the endpoint `/device/sleep/day/{fromDate}/{toDate}`.\n    \n2. Include the user's `access_token` in the \"Authorization\" header of the request to ensure that the operation is secure and specific to the authenticated user.\n    \n3. Specify the `fromDate` and `toDate` parameters in the URL to set the date range for the data retrieval. The API will retrieve sleep data within this specified time frame.\n    \n4. The system retrieves and presents the daily sleep data within the defined date range, including sleep duration and sleep quality.\n    \n5. The API responds with the daily sleep data, allowing users to analyze and monitor their sleep patterns and quality on a daily basis.\n    \n\nThe \"Get Daily Sleep Data\" API provides users with detailed insights into their sleep patterns and quality on a daily basis. The `access_token` in the header ensures that the operation is secure and limited to the authenticated user's data. This functionality supports users in maintaining and improving their sleep quality and overall well-being."
					},
					"response": []
				},
				{
					"name": "get-monthly-sleep-data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Success Response\");",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.value).to.eql(100);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}device/sleep/fixmonth/2023-11",
							"host": [
								"{{url}}device"
							],
							"path": [
								"sleep",
								"fixmonth",
								"2023-11"
							]
						},
						"description": "The \"Get Fixed-Month Sleep Data\" API enables users to access their recorded sleep data for a fixed month specified by the `monthKey` parameter.\n\n**Key Features:**\n\n- **Method:** GET\n    \n- **Endpoint:** `/device/sleep/fixmonth/{monthKey}`\n    \n\n**Usage:**\n\n1. To retrieve sleep data for a specific month, users can make a GET request to the endpoint `/device/sleep/fixmonth/{monthKey}`.\n    \n2. Include the user's `access_token` in the \"Authorization\" header of the request to ensure that the operation is secure and specific to the authenticated user.\n    \n3. Specify the `monthKey` parameter in the URL to indicate the target month for sleep data retrieval. The API will retrieve sleep data for the specified month.\n    \n4. The system retrieves and presents the sleep data for the fixed month as indicated by the `monthKey`.\n    \n5. The API responds with the sleep data for the selected month, allowing users to analyze and monitor their sleep patterns and quality within that specific time frame.\n    \n\nThe \"Get Fixed-Month Sleep Data\" API offers a focused view of sleep information for a designated month. The `access_token` in the header ensures that the operation is secure and user-specific, supporting users in their efforts to maintain and improve their sleep quality during the selected month."
					},
					"response": []
				},
				{
					"name": "get-yearly-sleep-data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Success Response\");",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.value).to.eql(100);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}device/sleep/fixyear/2023",
							"host": [
								"{{url}}device"
							],
							"path": [
								"sleep",
								"fixyear",
								"2023"
							]
						},
						"description": "The \"Get Fixed-Year Sleep Data\" API empowers users to access their recorded sleep data for a fixed year identified by the `yearKey` parameter.\n\n**Key Features:**\n\n- **Method:** GET\n    \n- **Endpoint:** `/device/sleep/fixyear/{yearKey}`\n    \n\n**Usage:**\n\n1. To retrieve sleep data for a specific year, users can make a GET request to the endpoint `/device/sleep/fixyear/{yearKey}`.\n    \n2. Include the user's `access_token` in the \"Authorization\" header of the request to ensure that the operation is secure and specific to the authenticated user.\n    \n3. Specify the `yearKey` parameter in the URL to indicate the target year for sleep data retrieval. The API will retrieve sleep data for the specified year.\n    \n4. The system retrieves and presents the sleep data for the fixed year as indicated by the `yearKey`.\n    \n5. The API responds with the sleep data for the selected year, allowing users to analyze and monitor their sleep patterns and quality within that specific time frame.\n    \n\nThe \"Get Fixed-Year Sleep Data\" API provides a focused view of sleep information for a designated year. The `access_token` in the header ensures that the operation is secure and user-specific, supporting users in their efforts to maintain and improve their sleep quality throughout the chosen year."
					},
					"response": []
				}
			],
			"description": "The \"Sleep Module\" is an essential component within the system, facilitating the recording and retrieval of sleep-related data. It consists of four APIs that enable users to save and access their sleep data, categorized by frequency type (daily, monthly, and yearly).\n\n**Key Features:**\n\n1. **Save Sleep Data:**\n    \n    - **API Name:** Save Sleep Data\n        \n    - **Description:** This API allows users to record and store their sleep data, including sleep duration, sleep quality, and other relevant metrics at specific time intervals. It provides a means for tracking and managing sleep patterns.\n        \n2. **Get Daily Sleep Data:**\n    \n    - **API Name:** Get Daily Sleep Data\n        \n    - **Description:** Users can utilize this API to retrieve their sleep data on a daily basis. It offers insights into their daily sleep patterns and quality.\n        \n3. **Get Monthly Sleep Data:**\n    \n    - **API Name:** Get Monthly Sleep Data\n        \n    - **Description:** This API enables users to access their sleep data on a monthly basis, providing an overview of their sleep patterns and quality throughout a calendar month.\n        \n4. **Get Yearly Sleep Data:**\n    \n    - **API Name:** Get Yearly Sleep Data\n        \n    - **Description:** Users can use this API to retrieve their sleep data on a yearly basis, gaining a comprehensive view of their sleep patterns and quality over the course of a year.\n        \n\nThe \"Sleep Module\" simplifies the process of tracking and analyzing sleep data, promoting healthier sleep habits and overall well-being. These APIs empower users to record and access their sleep data on various time scales, allowing them to gain valuable insights and make informed decisions to improve their sleep quality. This functionality supports a well-rested and health-conscious user community within the system."
		},
		{
			"name": "spo2",
			"item": [
				{
					"name": "post-spo2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Messsage\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Heart rate data saved successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data_arr\": [\n      {\n        \"readings\": [110],\n        \"start_time\": 1698813662000,\n        \"interval_seconds\": 86400\n      },\n      {\n        \"readings\": [113],\n        \"start_time\": 1698892800000,\n        \"interval_seconds\": 86400\n      },\n      {\n        \"readings\": [125],\n        \"start_time\": 1698979200000,\n        \"interval_seconds\": 86400\n      },\n      {\n        \"readings\": [103],\n        \"start_time\": 1699065600000,\n        \"interval_seconds\": 86400\n      },\n      {\n        \"readings\": [118],\n        \"start_time\": 1699152000000,\n        \"interval_seconds\": 86400\n      },\n      {\n        \"readings\": [86],\n        \"start_time\": 1699238400000,\n        \"interval_seconds\": 86400\n      },\n      {\n        \"readings\": [94],\n        \"start_time\": 1699324800000,\n        \"interval_seconds\": 86400\n      },\n      {\n        \"readings\": [77],\n        \"start_time\": 1699411200000,\n        \"interval_seconds\": 86400\n      },\n      {\n        \"readings\": [92],\n        \"start_time\": 1699497600000,\n        \"interval_seconds\": 86400\n      },\n      {\n        \"readings\": [87],\n        \"start_time\": 1699584000000,\n        \"interval_seconds\": 86400\n      },\n      {\n        \"readings\": [106],\n        \"start_time\": 1699670400000,\n        \"interval_seconds\": 86400\n      },\n      {\n        \"readings\": [100],\n        \"start_time\": 1699756800000,\n        \"interval_seconds\": 86400\n      },\n      {\n        \"readings\": [129],\n        \"start_time\": 1699843200000,\n        \"interval_seconds\": 86400\n      },\n      {\n        \"readings\": [101],\n        \"start_time\": 1699929600000,\n        \"interval_seconds\": 86400\n      },\n      {\n        \"readings\": [82],\n        \"start_time\": 1700016000000,\n        \"interval_seconds\": 86400\n      },\n      {\n        \"readings\": [90],\n        \"start_time\": 1700102400000,\n        \"interval_seconds\": 86400\n      },\n      {\n        \"readings\": [119],\n        \"start_time\": 1700188800000,\n        \"interval_seconds\": 86400\n      },\n      {\n        \"readings\": [117],\n        \"start_time\": 1700275200000,\n        \"interval_seconds\": 86400\n      },\n      {\n        \"readings\": [121],\n        \"start_time\": 1700361600000,\n        \"interval_seconds\": 86400\n      },\n      {\n        \"readings\": [97],\n        \"start_time\": 1700448000000,\n        \"interval_seconds\": 86400\n      },\n      {\n        \"readings\": [74],\n        \"start_time\": 1700534400000,\n        \"interval_seconds\": 86400\n      },\n      {\n        \"readings\": [104],\n        \"start_time\": 1700620800000,\n        \"interval_seconds\": 86400\n      },\n      {\n        \"readings\": [113],\n        \"start_time\": 1700707200000,\n        \"interval_seconds\": 86400\n      },\n      {\n        \"readings\": [77],\n        \"start_time\": 1700793600000,\n        \"interval_seconds\": 86400\n      },\n      {\n        \"readings\": [83],\n        \"start_time\": 1700880000000,\n        \"interval_seconds\": 86400\n      },\n      {\n        \"readings\": [105],\n        \"start_time\": 1700966400000,\n        \"interval_seconds\": 86400\n      },\n      {\n        \"readings\": [98],\n        \"start_time\": 1701052800000,\n        \"interval_seconds\": 86400\n      },\n      {\n        \"readings\": [88],\n        \"start_time\": 1701139200000,\n        \"interval_seconds\": 86400\n      },\n      {\n        \"readings\": [123],\n        \"start_time\": 1701225600000,\n        \"interval_seconds\": 86400\n      },\n      {\n        \"readings\": [118],\n        \"start_time\": 1701312000000,\n        \"interval_seconds\": 86400\n      },\n      {\n        \"readings\": [93],\n        \"start_time\": 1701398400000,\n        \"interval_seconds\": 86400\n      },\n      {\n        \"readings\": [73],\n        \"start_time\": 1701484800000,\n        \"interval_seconds\": 86400\n      },\n      {\n        \"readings\": [86],\n        \"start_time\": 1701571200000,\n        \"interval_seconds\": 86400\n      }\n    ]\n  }\n  ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}device/post-spo2",
							"host": [
								"{{url}}device"
							],
							"path": [
								"post-spo2"
							]
						},
						"description": "The \"Save SpO2 Data\" API empowers users to document and preserve their blood oxygen saturation (SpO2) data within the system, enabling the tracking and management of SpO2 levels.\n\n**Key Features:**\n\n- **Method:** POST\n    \n- **Endpoint:** `/save-spo2-data`\n    \n\n**Usage:**\n\n1. To record SpO2 data, users can make a POST request to the `/save-spo2-data` endpoint within the SpO2 Module.\n    \n2. Include the user's `access_token` in the \"Authorization\" header of the request to ensure that the operation is secure and specific to the authenticated user.\n    \n3. In the request body, provide a JSON object that includes SpO2-related metrics and details. This object may include attributes such as:\n    \n    - `timestamp`: The date and time of the SpO2 reading.\n        \n    - `spo2_percentage`: The recorded SpO2 percentage reading.\n        \n    - Additional relevant data as needed.\n        \n4. The system records and stores the provided SpO2 data, allowing users to track and monitor their oxygen saturation levels over time.\n    \n5. Upon successful execution of the API, the system confirms the recording of SpO2 data, making it available for users to review and analyze their oxygen saturation levels.\n    \n\nThe \"Save SpO2 Data\" API supports users in monitoring and managing their SpO2 levels, which is crucial for maintaining good health. By including the `access_token` in the header and providing a JSON object in the request body, users can efficiently record their SpO2 data and gain insights into their overall well-being."
					},
					"response": []
				},
				{
					"name": "get-spo2-data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Success Response\");",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.value).to.eql(100);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}device/spo2/year/1674993667000/1701571200000",
							"host": [
								"{{url}}device"
							],
							"path": [
								"spo2",
								"year",
								"1674993667000",
								"1701571200000"
							]
						},
						"description": "The \"Get Daily SpO2 Data\" API offers users the ability to access and review their recorded SpO2 data on a daily basis, within a defined date range from `fromDate` to `toDate`.\n\n**Key Features:**\n\n- **Method:** GET\n    \n- **Endpoint:** `/device/spo2/day/{fromDate}/{toDate}`\n    \n\n**Usage:**\n\n1. To retrieve daily SpO2 data, users can make a GET request to the endpoint `/device/spo2/day/{fromDate}/{toDate}`.\n    \n2. Include the user's `access_token` in the \"Authorization\" header of the request to ensure that the operation is secure and specific to the authenticated user.\n    \n3. Specify the `fromDate` and `toDate` parameters in the URL to set the date range for the data retrieval. The API will retrieve SpO2 data within this specified time frame.\n    \n4. The system retrieves and presents the daily SpO2 data within the defined date range, including SpO2 percentage readings.\n    \n5. The API responds with the daily SpO2 data, allowing users to analyze and monitor their oxygen saturation levels on a daily basis.\n    \n\nThe \"Get Daily SpO2 Data\" API provides users with detailed insights into their oxygen saturation levels on a daily basis. The `access_token` in the header ensures that the operation is secure and limited to the authenticated user's data. This functionality supports users in maintaining and monitoring their SpO2 levels, which is crucial for their health and well-being."
					},
					"response": []
				},
				{
					"name": "get-monthly-spo2-data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Success Response\");",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.value).to.eql(100);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}device/spo2/fixmonth/2023-11",
							"host": [
								"{{url}}device"
							],
							"path": [
								"spo2",
								"fixmonth",
								"2023-11"
							]
						},
						"description": "The \"Get Fixed-Month SpO2 Data\" API enables users to access their recorded SpO2 data for a fixed month specified by the `monthKey` parameter.\n\n**Key Features:**\n\n- **Method:** GET\n    \n- **Endpoint:** `/device/spo2/fixmonth/{monthKey}`\n    \n\n**Usage:**\n\n1. To retrieve SpO2 data for a specific month, users can make a GET request to the endpoint `/device/spo2/fixmonth/{monthKey}`.\n    \n2. Include the user's `access_token` in the \"Authorization\" header of the request to ensure that the operation is secure and specific to the authenticated user.\n    \n3. Specify the `monthKey` parameter in the URL to indicate the target month for SpO2 data retrieval. The API will retrieve SpO2 data for the specified month.\n    \n4. The system retrieves and presents the SpO2 data for the fixed month as indicated by the `monthKey`.\n    \n5. The API responds with the SpO2 data for the selected month, allowing users to analyze and monitor their oxygen saturation levels within that specific time frame.\n    \n\nThe \"Get Fixed-Month SpO2 Data\" API offers a focused view of SpO2 information for a designated month. The `access_token` in the header ensures that the operation is secure and user-specific, supporting users in their efforts to maintain and monitor their SpO2 levels effectively during the selected month, which is crucial for their health and well-being."
					},
					"response": []
				},
				{
					"name": "get-yearly-spo2-data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Success Response\");",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.value).to.eql(100);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}device/spo2/fixyear/2023",
							"host": [
								"{{url}}device"
							],
							"path": [
								"spo2",
								"fixyear",
								"2023"
							]
						},
						"description": "The \"Get Fixed-Year SpO2 Data\" API empowers users to access their recorded SpO2 data for a fixed year identified by the `yearKey` parameter.\n\n**Key Features:**\n\n- **Method:** GET\n    \n- **Endpoint:** `/device/spo2/fixyear/{yearKey}`\n    \n\n**Usage:**\n\n1. To retrieve SpO2 data for a specific year, users can make a GET request to the endpoint `/device/spo2/fixyear/{yearKey}`.\n    \n2. Include the user's `access_token` in the \"Authorization\" header of the request to ensure that the operation is secure and specific to the authenticated user.\n    \n3. Specify the `yearKey` parameter in the URL to indicate the target year for SpO2 data retrieval. The API will retrieve SpO2 data for the specified year.\n    \n4. The system retrieves and presents the SpO2 data for the fixed year as indicated by the `yearKey`.\n    \n5. The API responds with the SpO2 data for the selected year, allowing users to analyze and monitor their oxygen saturation levels within that specific time frame.\n    \n\nThe \"Get Fixed-Year SpO2 Data\" API provides a focused view of SpO2 information for a designated year. The `access_token` in the header ensures that the operation is secure and user-specific, supporting users in their efforts to maintain and monitor their SpO2 levels effectively throughout the chosen year, which is essential for their health and well-being."
					},
					"response": []
				}
			],
			"description": "The \"SpO2 Module\" is an essential component within the system, designed to help users track and manage their blood oxygen saturation (SpO2) levels. It provides a range of APIs that allow users to save their SpO2 data and access SpO2 statistics, categorized by frequency type (daily, monthly, and yearly).\n\n**Key Features:**\n\n1. **Save SpO2 Data:**\n    \n    - **API Name:** Save SpO2 Data\n        \n    - **Description:** This API allows users to record and store their SpO2 data, including SpO2 percentage readings at specific time intervals. It provides a structured approach to tracking and managing SpO2 levels.\n        \n2. **Get Daily SpO2 Data:**\n    \n    - **API Name:** Get Daily SpO2 Data\n        \n    - **Description:** Users can utilize this API to retrieve their SpO2 data on a daily basis. It offers insights into their daily SpO2 levels and fluctuations.\n        \n3. **Get Monthly SpO2 Data:**\n    \n    - **API Name:** Get Monthly SpO2 Data\n        \n    - **Description:** This API enables users to access their SpO2 data on a monthly basis, providing an overview of SpO2 trends over a calendar month.\n        \n4. **Get Yearly SpO2 Data:**\n    \n    - **API Name:** Get Yearly SpO2 Data\n        \n    - **Description:** Users can use this API to retrieve their SpO2 data on a yearly basis, gaining a comprehensive view of SpO2 patterns and changes throughout the year.\n        \n\nThe \"SpO2 Module\" simplifies the process of tracking and analyzing SpO2 data, promoting healthy monitoring of oxygen saturation levels. These APIs empower users to record and access their SpO2 data on various time scales, allowing them to gain insights into their health and make informed decisions to improve their well-being. This functionality supports a health-conscious user community within the system."
		},
		{
			"name": "steps",
			"item": [
				{
					"name": "post-steps",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Messsage\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"steps data saved successfully\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjZlNjZmZWVkLTU0NWItNDYxYy1iMDM2LTFjYWQ1N2UxYmU3ZiIsIm5hbWUiOiJhbWFuIGF2YWtuIiwibW9iaWxlX251bWJlciI6IiIsImVtYWlsIjoibXVzaWNzdHJlYW1pbmdmb3JhbGxAZ21haWwuY29tIiwiZGV2aWNlX2lkIjoiMTUxNzBlY2QyNjZhNmVjZiIsImlhdCI6MTY5ODczNDI0OCwiZXhwIjoxNzAxMzI2MjQ4fQ.710Qke7P0LokpwA6ZPBOBZNXg8PP3AvyoX3COD2zihk",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"data_arr\":[{\"calories\":0,\"calories_unit\":\"kcal\",\"createdAt\":\"2023-10-29\",\"datetime\":1698562868810,\"deviceModel\":\"ONWEAR\",\"distance\":0,\"distance_unit\":\"meters\",\"id\":3,\"steps\":0,\"steps_unit\":\"steps\",\"syncStatus\":false},{\"calories\":201,\"calories_unit\":\"kcal\",\"createdAt\":\"2023-10-30\",\"datetime\":1698649268462,\"deviceModel\":\"ONWEAR\",\"distance\":3000,\"distance_unit\":\"meters\",\"id\":2,\"steps\":5107,\"steps_unit\":\"steps\",\"syncStatus\":false}]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}device/post-steps",
							"host": [
								"{{url}}device"
							],
							"path": [
								"post-steps"
							]
						},
						"description": "The \"Save Steps Data\" API empowers users to document and preserve their daily step counts and physical activity data within the system, enabling the tracking and management of their physical activity.\n\n**Key Features:**\n\n- **Method:** POST\n- **Endpoint:** `/post-steps-data`\n    \n\n**Usage:**\n\n1. To record step data and physical activity, users can make a POST request to the `/post-steps-data` endpoint within the Steps Module.\n2. Include the user's `access_token` in the \"Authorization\" header of the request to ensure that the operation is secure and specific to the authenticated user.\n3. In the request body, provide a JSON object that includes step-related metrics and details. This object may include attributes such as:\n    - `timestamp`: The date and time of the step count record.\n    - `step_count`: The number of steps taken during the recorded activity.\n    - Additional relevant data as needed.\n4. The system records and stores the provided step data and physical activity information, allowing users to track and monitor their daily activity and step counts.\n5. Upon successful execution of the API, the system confirms the recording of step data, making it available for users to review and analyze their physical activity and step counts.\n    \n\nThe \"Save Steps Data\" API supports users in tracking and managing their daily physical activity and step counts, which is essential for maintaining an active and healthy lifestyle. By including the `access_token` in the header and providing a JSON object in the request body, users can efficiently record their step data, aiding in their efforts to monitor and improve their physical activity and well-being."
					},
					"response": []
				},
				{
					"name": "get-steps-data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Success Response\");",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.value).to.eql(100);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjZlNjZmZWVkLTU0NWItNDYxYy1iMDM2LTFjYWQ1N2UxYmU3ZiIsIm5hbWUiOiJhbWFuIGF2YWtuIiwibW9iaWxlX251bWJlciI6IiIsImVtYWlsIjoibXVzaWNzdHJlYW1pbmdmb3JhbGxAZ21haWwuY29tIiwiZGV2aWNlX2lkIjoiMTUxNzBlY2QyNjZhNmVjZiIsImlhdCI6MTY5ODczNDI0OCwiZXhwIjoxNzAxMzI2MjQ4fQ.710Qke7P0LokpwA6ZPBOBZNXg8PP3AvyoX3COD2zihk",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}device/steps/day/1697955611000/1698819611000",
							"host": [
								"{{url}}device"
							],
							"path": [
								"steps",
								"day",
								"1697955611000",
								"1698819611000"
							]
						},
						"description": "The \"Get Daily Steps Data\" API offers users the ability to access and review their recorded daily step counts and physical activity data within a defined date range from `fromDate` to `toDate`.\n\n**Key Features:**\n\n- **Method:** GET\n    \n- **Endpoint:** `/device/steps/day/{fromDate}/{toDate}`\n    \n\n**Usage:**\n\n1. To retrieve daily step data and physical activity information, users can make a GET request to the endpoint `/device/steps/day/{fromDate}/{toDate}`.\n    \n2. Include the user's `access_token` in the \"Authorization\" header of the request to ensure that the operation is secure and specific to the authenticated user.\n    \n3. Specify the `fromDate` and `toDate` parameters in the URL to set the date range for data retrieval. The API will retrieve step data within this specified time frame.\n    \n4. The system retrieves and presents the daily step data, including step counts and associated physical activity details, within the defined date range.\n    \n5. The API responds with the daily step data and physical activity information, allowing users to analyze and monitor their daily activity and step counts.\n    \n\nThe \"Get Daily Steps Data\" API provides users with insights into their daily physical activity and step counts. The `access_token` in the header ensures that the operation is secure and limited to the authenticated user's data. This functionality supports users in maintaining an active and healthy lifestyle and allows them to make informed decisions to improve their physical well-being."
					},
					"response": []
				},
				{
					"name": "get-monthly-steps-data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Success Response\");",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.value).to.eql(100);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}device/steps/fixmonth/2023-09",
							"host": [
								"{{url}}device"
							],
							"path": [
								"steps",
								"fixmonth",
								"2023-09"
							]
						}
					},
					"response": []
				},
				{
					"name": "get-yearly-steps-data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Success Response\");",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.value).to.eql(100);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}device/steps/fixyear/2023",
							"host": [
								"{{url}}device"
							],
							"path": [
								"steps",
								"fixyear",
								"2023"
							]
						}
					},
					"response": []
				},
				{
					"name": "get-device-stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Success Response\");",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.value).to.eql(100);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}device/stats/year/1693569667000/1696084119000",
							"host": [
								"{{url}}device"
							],
							"path": [
								"stats",
								"year",
								"1693569667000",
								"1696084119000"
							]
						},
						"description": "The \"Get Steps Stats Data\" API is a versatile tool that empowers users to access statistical data specifically related to daily step counts and physical activity within the system. Users can customize the data retrieval by specifying the frequency, date range, and other parameters to tailor the information to their needs.\n\n**Key Features:**\n\n- **Method:** GET\n    \n- **Endpoint:** `/device/steps/stats/{frequency}/{fromDate}/{toDate}`\n    \n\n**Usage:**\n\n1. To retrieve statistical data related to daily step counts and physical activity, users can make a GET request to the endpoint `/device/steps/stats/{frequency}/{fromDate}/{toDate}`.\n    \n2. Include the user's `access_token` in the \"Authorization\" header of the request to ensure that the operation is secure and specific to the authenticated user.\n    \n3. Define the `frequency` parameter in the URL to specify the desired data frequency (e.g., daily, monthly, yearly, etc.).\n    \n4. Specify the `fromDate` and `toDate` parameters in the URL to set the date range for data retrieval.\n    \n5. The system retrieves and compiles the relevant statistical data related to daily step counts and physical activity based on the specified parameters.\n    \n6. The API responds with the statistical data for step counts and physical activity for the chosen frequency and date range, allowing users to analyze and interpret the data as needed.\n    \n\nThe \"Get Steps Stats Data\" API offers a flexible and user-centric approach to accessing statistical data related to daily step counts and physical activity. By customizing the parameters, users can retrieve step-related data that aligns with their specific needs, whether it's on a daily, monthly, yearly, or other interval. The inclusion of the `access_token` in the header ensures secure and user-specific data retrieval, empowering users to monitor their physical activity, set goals, and make informed decisions to improve their health and well-being."
					},
					"response": []
				},
				{
					"name": "get-distance-data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Success Response\");",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.value).to.eql(100);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}device/distance/day/1693569667000/1696084119000",
							"host": [
								"{{url}}device"
							],
							"path": [
								"distance",
								"day",
								"1693569667000",
								"1696084119000"
							]
						},
						"description": "The \"Get Daily Distance Data\" API provides users with access to statistical data related to the total distance covered in steps on a daily basis. This data allows users to track and monitor their physical activity and daily distance traveled.\n\n**Key Features:**\n\n- **Method:** GET\n    \n- **Endpoint:** `/device/distance/day/{fromDate}/{toDate}`\n    \n\n**Usage:**\n\n1. To retrieve data related to the total distance covered in steps on a daily basis, users can make a GET request to the endpoint `/device/distance/day/{fromDate}/{toDate}`.\n    \n2. Include the user's `access_token` in the \"Authorization\" header of the request to ensure that the operation is secure and specific to the authenticated user.\n    \n3. Specify the `fromDate` and `toDate` parameters in the URL to set the date range for data retrieval.\n    \n4. The system retrieves and calculates the total distance covered in steps for each day within the specified date range.\n    \n5. The API responds with the daily distance data, allowing users to analyze and monitor their daily physical activity and distance traveled in steps.\n    \n\nThe \"Get Daily Distance Data\" API provides users with valuable insights into their daily physical activity, specifically the total distance they've covered in steps. This data is important for individuals looking to monitor their health and fitness progress. The inclusion of the `access_token` in the header ensures secure and user-specific data retrieval, enabling users to make informed decisions about their physical activity levels and well-being."
					},
					"response": []
				},
				{
					"name": "get-monthly-distance-data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Success Response\");",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.value).to.eql(100);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}device/distance/fixmonth/2023-09",
							"host": [
								"{{url}}device"
							],
							"path": [
								"distance",
								"fixmonth",
								"2023-09"
							]
						},
						"description": "The \"Get Fixed-Month Distance Data\" API empowers users to access statistical data related to the total distance covered in steps for a fixed month specified by the `monthKey` parameter. This data provides insights into users' monthly physical activity and distance traveled in steps.\n\n**Key Features:**\n\n- **Method:** GET\n    \n- **Endpoint:** `/device/distance/fixmonth/{monthKey}`\n    \n\n**Usage:**\n\n1. To retrieve data related to the total distance covered in steps for a specific month, users can make a GET request to the endpoint `/device/distance/fixmonth/{monthKey}`.\n    \n2. Include the user's `access_token` in the \"Authorization\" header of the request to ensure that the operation is secure and specific to the authenticated user.\n    \n3. Specify the `monthKey` parameter in the URL to indicate the target month for data retrieval. The API will calculate and retrieve the total distance covered in steps for the specified month.\n    \n4. The system compiles and presents the total distance data for the fixed month, allowing users to analyze their monthly physical activity and distance traveled in steps.\n    \n5. The API responds with the monthly distance data, enabling users to monitor their progress and physical activity trends over the specified month.\n    \n\nThe \"Get Fixed-Month Distance Data\" API offers a focused view of users' physical activity and the total distance covered in steps for a designated month. The `access_token` in the header ensures that the operation is secure and user-specific, supporting users in monitoring and improving their fitness and health within the chosen month."
					},
					"response": []
				},
				{
					"name": "get-yearly-distance-data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Success Response\");",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.value).to.eql(100);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}device/distance/fixyear/2023",
							"host": [
								"{{url}}device"
							],
							"path": [
								"distance",
								"fixyear",
								"2023"
							]
						},
						"description": "The \"Get Fixed-Year Distance Data\" API empowers users to access statistical data related to the total distance covered in steps for a fixed year specified by the `yearKey` parameter. This data provides insights into users' yearly physical activity and distance traveled in steps.\n\n**Key Features:**\n\n- **Method:** GET\n    \n- **Endpoint:** `/device/distance/fixyear/{yearKey}`\n    \n\n**Usage:**\n\n1. To retrieve data related to the total distance covered in steps for a specific year, users can make a GET request to the endpoint `/device/distance/fixyear/{yearKey}`.\n    \n2. Include the user's `access_token` in the \"Authorization\" header of the request to ensure that the operation is secure and specific to the authenticated user.\n    \n3. Specify the `yearKey` parameter in the URL to indicate the target year for data retrieval. The API will calculate and retrieve the total distance covered in steps for the specified year.\n    \n4. The system compiles and presents the total distance data for the fixed year, allowing users to analyze their yearly physical activity and distance traveled in steps.\n    \n5. The API responds with the yearly distance data, enabling users to monitor their progress and physical activity trends over the specified year.\n    \n\nThe \"Get Fixed-Year Distance Data\" API offers a focused view of users' physical activity and the total distance covered in steps for a designated year. The `access_token` in the header ensures that the operation is secure and user-specific, supporting users in monitoring and improving their fitness and health within the chosen year."
					},
					"response": []
				},
				{
					"name": "get-calories-data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Success Response\");",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.value).to.eql(100);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}device/calories/day/1693569667000/1696084119000",
							"host": [
								"{{url}}device"
							],
							"path": [
								"calories",
								"day",
								"1693569667000",
								"1696084119000"
							]
						},
						"description": "The \"Get Daily Calories Burned Data\" API provides users with access to statistical data related to the calories burned through steps on a daily basis. This data allows users to monitor their daily energy expenditure and make informed decisions about their physical activity and fitness goals.\n\n**Key Features:**\n\n- **Method:** GET\n    \n- **Endpoint:** `/device/calories/day/{fromDate}/{toDate}`\n    \n\n**Usage:**\n\n1. To retrieve data related to the calories burned through steps on a daily basis, users can make a GET request to the endpoint `/device/calories/day/{fromDate}/{toDate}`.\n    \n2. Include the user's `access_token` in the \"Authorization\" header of the request to ensure that the operation is secure and specific to the authenticated user.\n    \n3. Specify the `fromDate` and `toDate` parameters in the URL to set the date range for data retrieval.\n    \n4. The system calculates and retrieves the calories burned through steps for each day within the specified date range.\n    \n5. The API responds with the daily calories burned data, enabling users to analyze and monitor their daily energy expenditure and physical activity.\n    \n\nThe \"Get Daily Calories Burned Data\" API offers valuable insights into users' daily energy expenditure, specifically the calories burned through steps. This data is essential for individuals looking to manage their fitness and health. The inclusion of the `access_token` in the header ensures secure and user-specific data retrieval, empowering users to make informed decisions about their physical activity levels and well-being."
					},
					"response": []
				},
				{
					"name": "get-monthly-calories-data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Success Response\");",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.value).to.eql(100);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}device/calories/fixmonth/2023-09",
							"host": [
								"{{url}}device"
							],
							"path": [
								"calories",
								"fixmonth",
								"2023-09"
							]
						},
						"description": "The \"Get Fixed-Month Calories Burned Data\" API empowers users to access statistical data related to the calories burned through steps for a fixed month specified by the `monthKey` parameter. This data provides insights into users' monthly energy expenditure and helps them monitor their physical activity and fitness goals.\n\n**Key Features:**\n\n- **Method:** GET\n    \n- **Endpoint:** `/device/calories/fixmonth/{monthKey}`\n    \n\n**Usage:**\n\n1. To retrieve data related to the calories burned through steps for a specific month, users can make a GET request to the endpoint `/device/calories/fixmonth/{monthKey}`.\n    \n2. Include the user's `access_token` in the \"Authorization\" header of the request to ensure that the operation is secure and specific to the authenticated user.\n    \n3. Specify the `monthKey` parameter in the URL to indicate the target month for data retrieval. The API will calculate and retrieve the calories burned through steps for the specified month.\n    \n4. The system compiles and presents the calories burned data for the fixed month, allowing users to analyze their monthly energy expenditure and physical activity.\n    \n5. The API responds with the monthly calories burned data, enabling users to monitor their progress and fitness trends over the specified month.\n    \n\nThe \"Get Fixed-Month Calories Burned Data\" API offers a focused view of users' energy expenditure, specifically the calories burned through steps for a designated month. The `access_token` in the header ensures that the operation is secure and user-specific, supporting users in monitoring and improving their fitness and health within the chosen month."
					},
					"response": []
				},
				{
					"name": "get-yearly-calories-data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Success Response\");",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.value).to.eql(100);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}device/calories/fixyear/2023",
							"host": [
								"{{url}}device"
							],
							"path": [
								"calories",
								"fixyear",
								"2023"
							]
						},
						"description": "The \"Get Fixed-Year Calories Burned Data\" API empowers users to access statistical data related to the calories burned through steps for a fixed year specified by the `yearKey` parameter. This data provides insights into users' yearly energy expenditure and helps them monitor their physical activity and fitness goals.\n\n**Key Features:**\n\n- **Method:** GET\n    \n- **Endpoint:** `/device/calories/fixyear/{yearKey}`\n    \n\n**Usage:**\n\n1. To retrieve data related to the calories burned through steps for a specific year, users can make a GET request to the endpoint `/device/calories/fixyear/{yearKey}`.\n    \n2. Include the user's `access_token` in the \"Authorization\" header of the request to ensure that the operation is secure and specific to the authenticated user.\n    \n3. Specify the `yearKey` parameter in the URL to indicate the target year for data retrieval. The API will calculate and retrieve the calories burned through steps for the specified year.\n    \n4. The system compiles and presents the calories burned data for the fixed year, allowing users to analyze their yearly energy expenditure and physical activity.\n    \n5. The API responds with the yearly calories burned data, enabling users to monitor their progress and fitness trends over the specified year.\n    \n\nThe \"Get Fixed-Year Calories Burned Data\" API offers a focused view of users' energy expenditure, specifically the calories burned through steps for a designated year. The `access_token` in the header ensures that the operation is secure and user-specific, supporting users in monitoring and improving their fitness and health throughout the chosen year."
					},
					"response": []
				}
			],
			"description": "The \"Steps Module\" is a crucial component within the system, designed to help users track and manage their daily step counts and physical activity. It provides a range of APIs that allow users to save their step data and access step statistics, categorized by frequency type (daily, monthly, and yearly).\n\n**Key Features:**\n\n1. **Save Step Data:**\n    \n    - **API Name:** Save Step Data\n        \n    - **Description:** This API allows users to record and store their daily step counts and physical activity data at specific time intervals. It provides a structured approach to tracking and managing their physical activity.\n        \n2. **Get Daily Step Data:**\n    \n    - **API Name:** Get Daily Step Data\n        \n    - **Description:** Users can utilize this API to retrieve their daily step data, offering insights into their physical activity on a daily basis.\n        \n3. **Get Monthly Step Data:**\n    \n    - **API Name:** Get Monthly Step Data\n        \n    - **Description:** This API enables users to access their step data on a monthly basis, providing an overview of their physical activity trends over a calendar month.\n        \n4. **Get Yearly Step Data:**\n    \n    - **API Name:** Get Yearly Step Data\n        \n    - **Description:** Users can use this API to retrieve their step data on a yearly basis, gaining a comprehensive view of their physical activity patterns and changes throughout the year.\n        \n\nThe \"Steps Module\" simplifies the process of tracking and analyzing step data, promoting healthy physical activity and well-being. These APIs empower users to record and access their step data on various time scales, allowing them to gain insights into their daily activity and make informed decisions to improve their health. This functionality supports an active and health-conscious user community within the system."
		},
		{
			"name": "fcm",
			"item": [
				{
					"name": "New Request",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "identity",
			"value": ""
		},
		{
			"key": "variable_key",
			"value": ""
		}
	]
}
